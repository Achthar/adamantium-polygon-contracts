{
  "address": "0xC79469880202D294b4F947CdD8a0D9Ce6367c54B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "calcEffectiveCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral_ratio_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dollar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effective_collateral_ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dollar",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_refresh_cr_timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDollar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_band",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_target",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratio_step",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refresh_cooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_target_collateral_ratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_effective_collateral_ratio",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dollar",
          "type": "address"
        }
      ],
      "name": "setDollar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleDollar",
          "type": "address"
        }
      ],
      "name": "setOracleDollar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_band",
          "type": "uint256"
        }
      ],
      "name": "setPriceBand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_target",
          "type": "uint256"
        }
      ],
      "name": "setPriceTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio_step",
          "type": "uint256"
        }
      ],
      "name": "setRatioStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_refresh_cooldown",
          "type": "uint256"
        }
      ],
      "name": "setRefreshCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target_collateral_ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleEffectiveCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "using_effective_collateral_ratio",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb70ecb61ca1b52efe3e311e48562f2bfd5c74f2c9e20efd9780bf06ce77ea15a",
  "receipt": {
    "to": null,
    "from": "0x333132d4FCbe1B7F34198AD545672BbA95c5882b",
    "contractAddress": "0xC79469880202D294b4F947CdD8a0D9Ce6367c54B",
    "transactionIndex": 4,
    "gasUsed": "1876671",
    "logsBloom": "0x
    "blockHash": "0x25ba0b5ccd9083d429aa47cd4e1998d20a3e064bd2e4eb4421c00dbc2f26c172",
    "transactionHash": "0xb70ecb61ca1b52efe3e311e48562f2bfd5c74f2c9e20efd9780bf06ce77ea15a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 26666377,
        "transactionHash": "0xb70ecb61ca1b52efe3e311e48562f2bfd5c74f2c9e20efd9780bf06ce77ea15a",
        "address": "0xC79469880202D294b4F947CdD8a0D9Ce6367c54B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000333132d4fcbe1b7f34198ad545672bba95c5882b"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x25ba0b5ccd9083d429aa47cd4e1998d20a3e064bd2e4eb4421c00dbc2f26c172"
      }
    ],
    "blockNumber": 26666377,
    "cumulativeGasUsed": "2083081",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "528e37ad3cee8dde3b849d6f9ffe4ef0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calcEffectiveCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_ratio_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effective_collateral_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_refresh_cr_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_band\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_target\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio_step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target_collateral_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effective_collateral_ratio\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"}],\"name\":\"setDollar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleDollar\",\"type\":\"address\"}],\"name\":\"setOracleDollar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_band\",\"type\":\"uint256\"}],\"name\":\"setPriceBand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_target\",\"type\":\"uint256\"}],\"name\":\"setPriceTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio_step\",\"type\":\"uint256\"}],\"name\":\"setRatioStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refresh_cooldown\",\"type\":\"uint256\"}],\"name\":\"setRefreshCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target_collateral_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEffectiveCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"using_effective_collateral_ratio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralRatioPolicy.sol\":\"CollateralRatioPolicy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/CollateralRatioPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ERC20/ERC20Custom.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/ICollateralRatioPolicy.sol\\\";\\n\\ncontract CollateralRatioPolicy is Ownable, ICollateralRatioPolicy, Initializable {\\n    using SafeMath for uint256;\\n\\n    address public oracleDollar;\\n    address public dollar;\\n    address public treasury;\\n\\n    // Constants for various precisions\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    uint256 private constant RATIO_PRECISION = 1e6;\\n\\n    // collateral_ratio\\n    uint256 public override target_collateral_ratio; // 6 decimals of precision\\n    uint256 public override effective_collateral_ratio; // 6 decimals of precision\\n    uint256 public last_refresh_cr_timestamp;\\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\\n    uint256 public ratio_step; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\\n    uint256 public price_target; // The price of DOLLAR; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at $1\\n    uint256 public price_band; // The bound above and below the price target at which the Collateral ratio is allowed to drop\\n    bool public collateral_ratio_paused = false; // during bootstraping phase, collateral_ratio will be fixed at 100%\\n    bool public using_effective_collateral_ratio = true; // toggle the effective collateral ratio usage\\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\\n\\n    /* ========== EVENTS ============= */\\n\\n    event TreasuryChanged(address indexed newTreasury);\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor() {\\n        ratio_step = 2500; // = 0.25% at 6 decimals of precision\\n        target_collateral_ratio = 1000000;\\n        effective_collateral_ratio = 1000000;\\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\\n        price_target = 1000000; // = $1. (6 decimals of precision). Collateral ratio will adjust according to the $1 price target at genesis\\n        price_band = 5000;\\n    }\\n\\n    function initialize(address _treasury, address _dollar) external onlyOwner initializer {\\n        setTreasury(_treasury);\\n        setDollar(_dollar);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function calcEffectiveCollateralRatio() public view returns (uint256) {\\n        if (!using_effective_collateral_ratio) {\\n            return target_collateral_ratio;\\n        }\\n        uint256 total_collateral_value = ITreasury(treasury).globalCollateralValue();\\n        uint256 total_supply_dollar = IERC20(dollar).totalSupply();\\n        uint256 ecr = total_collateral_value.mul(PRICE_PRECISION).div(total_supply_dollar);\\n        if (ecr > COLLATERAL_RATIO_MAX) {\\n            return COLLATERAL_RATIO_MAX;\\n        }\\n        return ecr;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function refreshCollateralRatio() public {\\n        require(collateral_ratio_paused == false, \\\"Collateral Ratio has been paused\\\");\\n        require(\\n            block.timestamp - last_refresh_cr_timestamp >= refresh_cooldown,\\n            \\\"Must wait for the refresh cooldown since last refresh\\\"\\n        );\\n\\n        uint256 current_dollar_price = IOracle(oracleDollar).consult();\\n\\n        // Step increments are 0.25% (upon genesis, changable by setRatioStep())\\n        if (current_dollar_price > price_target.add(price_band)) {\\n            // decrease collateral ratio\\n            if (target_collateral_ratio <= ratio_step) {\\n                // if within a step of 0, go to 0\\n                target_collateral_ratio = 0;\\n            } else {\\n                target_collateral_ratio = target_collateral_ratio.sub(ratio_step);\\n            }\\n        }\\n        // IRON price is below $1 - `price_band`. Need to increase `collateral_ratio`\\n        else if (current_dollar_price < price_target.sub(price_band)) {\\n            // increase collateral ratio\\n            if (target_collateral_ratio.add(ratio_step) >= COLLATERAL_RATIO_MAX) {\\n                target_collateral_ratio = COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\\n            } else {\\n                target_collateral_ratio = target_collateral_ratio.add(ratio_step);\\n            }\\n        }\\n\\n        // If using ECR, then calcECR. If not, update ECR = TCR\\n        if (using_effective_collateral_ratio) {\\n            effective_collateral_ratio = calcEffectiveCollateralRatio();\\n        } else {\\n            effective_collateral_ratio = target_collateral_ratio;\\n        }\\n\\n        last_refresh_cr_timestamp = block.timestamp;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setRatioStep(uint256 _ratio_step) public onlyOwner {\\n        ratio_step = _ratio_step;\\n    }\\n\\n    function setPriceTarget(uint256 _price_target) public onlyOwner {\\n        price_target = _price_target;\\n    }\\n\\n    function setRefreshCooldown(uint256 _refresh_cooldown) public onlyOwner {\\n        refresh_cooldown = _refresh_cooldown;\\n    }\\n\\n    function setPriceBand(uint256 _price_band) external onlyOwner {\\n        price_band = _price_band;\\n    }\\n\\n    function setTreasury(address _treasury) public onlyOwner {\\n        require(_treasury != address(0), \\\"invalidAddress\\\");\\n        treasury = _treasury;\\n        emit TreasuryChanged(treasury);\\n    }\\n\\n    function setDollar(address _dollar) public onlyOwner {\\n        require(_dollar != address(0), \\\"invalidAddress\\\");\\n        dollar = _dollar;\\n    }\\n\\n    // use to retstore CRs incase of using new Treasury\\n    function reset(uint256 _target_collateral_ratio, uint256 _effective_collateral_ratio) external onlyOwner {\\n        require(\\n            _target_collateral_ratio <= COLLATERAL_RATIO_MAX && _effective_collateral_ratio <= COLLATERAL_RATIO_MAX,\\n            \\\"invalidRatio\\\"\\n        );\\n        target_collateral_ratio = _target_collateral_ratio;\\n        effective_collateral_ratio = _effective_collateral_ratio;\\n    }\\n\\n    function toggleCollateralRatio() public onlyOwner {\\n        collateral_ratio_paused = !collateral_ratio_paused;\\n    }\\n\\n    function toggleEffectiveCollateralRatio() public onlyOwner {\\n        using_effective_collateral_ratio = !using_effective_collateral_ratio;\\n    }\\n\\n    function setOracleDollar(address _oracleDollar) public onlyOwner {\\n        require(_oracleDollar != address(0), \\\"invalidAddress\\\");\\n        oracleDollar = _oracleDollar;\\n    }\\n}\\n\",\"keccak256\":\"0x0762a99a7ec94f2a1ce0c5cbfaabfa3840d3e6deeb520db9aaea0e0e4004c914\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20Custom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Due to compiling issues, _name, _symbol, and _decimals were removed\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Custom is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance =\\n            allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\")\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb199fd5029951b72cc668c1d1baa191fda265e1c76f593989f1e4a8c286d5ac1\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralRatioPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralRatioPolicy {\\n    function target_collateral_ratio() external view returns (uint256);\\n\\n    function effective_collateral_ratio() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x61608278d8c15e41cb0b1650aaced5c299250d574c306fac90300fe30579c213\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IOracle {\\n    function consult() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79923f4195fb06084d97d894147a9191266f6afc4a381c51d50b29b3509c2058\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITreasury {\\n    function hasPool(address _address) external view returns (bool);\\n\\n    function collateralReserve() external view returns (address);\\n\\n    function globalCollateralBalance() external view returns (uint256);\\n\\n    function globalCollateralValue() external view returns (uint256);\\n\\n    function requestTransfer(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n\\n    function info()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x34f769aad18cccd1da2fab55987f2130127388104a28b308f4eb428faf90c168\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600b60006101000a81548160ff0219169083151502179055506001600b60016101000a81548160ff02191690831515021790555034801561004657600080fd5b50600061005761013360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506109c4600881905550620f4240600481905550620f4240600581905550610e10600781905550620f4240600981905550611388600a8190555061013b565b600033905090565b611dd28061014a6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636140133b116100f9578063ac4f843e11610097578063bef40ec811610071578063bef40ec81461044d578063c03f7be314610457578063f0f4426014610475578063f2fde38b14610491576101c4565b8063ac4f843e146103f3578063af83136e14610411578063b16ce4601461042f576101c4565b8063715018a6116100d3578063715018a61461038f57806387a140c3146103995780638da5cb5b146103b7578063a445c445146103d5576101c4565b80636140133b1461033757806361d027b3146103535780636ae7448814610371576101c4565b80632cb4f63e116101665780634013124a116101405780634013124a146102d7578063408ab10f146102e1578063485cc955146102fd57806351adeb5714610319576101c4565b80632cb4f63e1461027f578063362d5ae31461029d5780634006311b146102b9576101c4565b80631dc43637116101a25780631dc436371461021d5780632853fb1014610239578063291878a8146102575780632988b66d14610261576101c4565b80630ca687dc146101c9578063186d9b2e146101e55780631c5df1e514610201575b600080fd5b6101e360048036038101906101de91906116cb565b6104ad565b005b6101ff60048036038101906101fa9190611730565b6105dd565b005b61021b60048036038101906102169190611730565b610663565b005b61023760048036038101906102329190611782565b6106e9565b005b6102416107cc565b60405161024e91906119f6565b60405180910390f35b61025f6107d2565b005b61026961087a565b60405161027691906118fb565b60405180910390f35b61028761088d565b60405161029491906119f6565b60405180910390f35b6102b760048036038101906102b291906116cb565b610893565b005b6102c16109c3565b6040516102ce91906119f6565b60405180910390f35b6102df6109c9565b005b6102fb60048036038101906102f69190611730565b610c17565b005b610317600480360381019061031291906116f4565b610c9d565b005b610321610e09565b60405161032e91906118e0565b60405180910390f35b610351600480360381019061034c9190611730565b610e2f565b005b61035b610eb5565b60405161036891906118e0565b60405180910390f35b610379610edb565b60405161038691906119f6565b60405180910390f35b610397610ee1565b005b6103a161101b565b6040516103ae91906118fb565b60405180910390f35b6103bf61102e565b6040516103cc91906118e0565b60405180910390f35b6103dd611057565b6040516103ea91906119f6565b60405180910390f35b6103fb61120e565b60405161040891906119f6565b60405180910390f35b610419611214565b60405161042691906119f6565b60405180910390f35b61043761121a565b60405161044491906118e0565b60405180910390f35b610455611240565b005b61045f6112e8565b60405161046c91906119f6565b60405180910390f35b61048f600480360381019061048a91906116cb565b6112ee565b005b6104ab60048036038101906104a691906116cb565b611483565b005b6104b561162c565b73ffffffffffffffffffffffffffffffffffffffff166104d361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059090611976565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6105e561162c565b73ffffffffffffffffffffffffffffffffffffffff1661060361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090611996565b60405180910390fd5b8060088190555050565b61066b61162c565b73ffffffffffffffffffffffffffffffffffffffff1661068961102e565b73ffffffffffffffffffffffffffffffffffffffff16146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690611996565b60405180910390fd5b8060078190555050565b6106f161162c565b73ffffffffffffffffffffffffffffffffffffffff1661070f61102e565b73ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c90611996565b60405180910390fd5b620f4240821115801561077b5750620f42408111155b6107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190611936565b60405180910390fd5b81600481905550806005819055505050565b600a5481565b6107da61162c565b73ffffffffffffffffffffffffffffffffffffffff166107f861102e565b73ffffffffffffffffffffffffffffffffffffffff161461084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590611996565b60405180910390fd5b600b60019054906101000a900460ff1615600b60016101000a81548160ff021916908315150217905550565b600b60019054906101000a900460ff1681565b60095481565b61089b61162c565b73ffffffffffffffffffffffffffffffffffffffff166108b961102e565b73ffffffffffffffffffffffffffffffffffffffff161461090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097690611976565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b60001515600b60009054906101000a900460ff16151514610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a16906119d6565b60405180910390fd5b60075460065442610a309190611b03565b1015610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a68906119b6565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637eeda7036040518163ffffffff1660e01b815260040160206040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b139190611759565b9050610b2c600a5460095461163490919063ffffffff16565b811115610b6e5760085460045411610b4b576000600481905550610b69565b610b6260085460045461164a90919063ffffffff16565b6004819055505b610bdb565b610b85600a5460095461164a90919063ffffffff16565b811015610bda57620f4240610ba760085460045461163490919063ffffffff16565b10610bbb57620f4240600481905550610bd9565b610bd260085460045461163490919063ffffffff16565b6004819055505b5b5b600b60019054906101000a900460ff1615610c0357610bf8611057565b600581905550610c0d565b6004546005819055505b4260068190555050565b610c1f61162c565b73ffffffffffffffffffffffffffffffffffffffff16610c3d61102e565b73ffffffffffffffffffffffffffffffffffffffff1614610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a90611996565b60405180910390fd5b8060098190555050565b610ca561162c565b73ffffffffffffffffffffffffffffffffffffffff16610cc361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1090611996565b60405180910390fd5b600060159054906101000a900460ff1680610d415750600060149054906101000a900460ff16155b610d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7790611956565b60405180910390fd5b60008060159054906101000a900460ff161590508015610dd1576001600060156101000a81548160ff0219169083151502179055506001600060146101000a81548160ff0219169083151502179055505b610dda836112ee565b610de382610893565b8015610e045760008060156101000a81548160ff0219169083151502179055505b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e3761162c565b73ffffffffffffffffffffffffffffffffffffffff16610e5561102e565b73ffffffffffffffffffffffffffffffffffffffff1614610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea290611996565b60405180910390fd5b80600a8190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b610ee961162c565b73ffffffffffffffffffffffffffffffffffffffff16610f0761102e565b73ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5490611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600b60009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600b60019054906101000a900460ff1661107757600454905061120b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2d97b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111199190611759565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118557600080fd5b505afa158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd9190611759565b905060006111e9826111db620f42408661166090919063ffffffff16565b61167690919063ffffffff16565b9050620f424081111561120457620f4240935050505061120b565b8093505050505b90565b60085481565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61124861162c565b73ffffffffffffffffffffffffffffffffffffffff1661126661102e565b73ffffffffffffffffffffffffffffffffffffffff16146112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b390611996565b60405180910390fd5b600b60009054906101000a900460ff1615600b60006101000a81548160ff021916908315150217905550565b60075481565b6112f661162c565b73ffffffffffffffffffffffffffffffffffffffff1661131461102e565b73ffffffffffffffffffffffffffffffffffffffff161461136a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136190611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d190611976565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60860405160405180910390a250565b61148b61162c565b73ffffffffffffffffffffffffffffffffffffffff166114a961102e565b73ffffffffffffffffffffffffffffffffffffffff16146114ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f690611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690611916565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081836116429190611a22565b905092915050565b600081836116589190611b03565b905092915050565b6000818361166e9190611aa9565b905092915050565b600081836116849190611a78565b905092915050565b60008135905061169b81611d6e565b92915050565b6000813590506116b081611d85565b92915050565b6000815190506116c581611d85565b92915050565b6000602082840312156116dd57600080fd5b60006116eb8482850161168c565b91505092915050565b6000806040838503121561170757600080fd5b60006117158582860161168c565b92505060206117268582860161168c565b9150509250929050565b60006020828403121561174257600080fd5b6000611750848285016116a1565b91505092915050565b60006020828403121561176b57600080fd5b6000611779848285016116b6565b91505092915050565b6000806040838503121561179557600080fd5b60006117a3858286016116a1565b92505060206117b4858286016116a1565b9150509250929050565b6117c781611b37565b82525050565b6117d681611b49565b82525050565b60006117e9602683611a11565b91506117f482611bdd565b604082019050919050565b600061180c600c83611a11565b915061181782611c2c565b602082019050919050565b600061182f602e83611a11565b915061183a82611c55565b604082019050919050565b6000611852600e83611a11565b915061185d82611ca4565b602082019050919050565b6000611875602083611a11565b915061188082611ccd565b602082019050919050565b6000611898603583611a11565b91506118a382611cf6565b604082019050919050565b60006118bb602083611a11565b91506118c682611d45565b602082019050919050565b6118da81611b75565b82525050565b60006020820190506118f560008301846117be565b92915050565b600060208201905061191060008301846117cd565b92915050565b6000602082019050818103600083015261192f816117dc565b9050919050565b6000602082019050818103600083015261194f816117ff565b9050919050565b6000602082019050818103600083015261196f81611822565b9050919050565b6000602082019050818103600083015261198f81611845565b9050919050565b600060208201905081810360008301526119af81611868565b9050919050565b600060208201905081810360008301526119cf8161188b565b9050919050565b600060208201905081810360008301526119ef816118ae565b9050919050565b6000602082019050611a0b60008301846118d1565b92915050565b600082825260208201905092915050565b6000611a2d82611b75565b9150611a3883611b75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a6d57611a6c611b7f565b5b828201905092915050565b6000611a8382611b75565b9150611a8e83611b75565b925082611a9e57611a9d611bae565b5b828204905092915050565b6000611ab482611b75565b9150611abf83611b75565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611af857611af7611b7f565b5b828202905092915050565b6000611b0e82611b75565b9150611b1983611b75565b925082821015611b2c57611b2b611b7f565b5b828203905092915050565b6000611b4282611b55565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c6964526174696f0000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f696e76616c696441646472657373000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d757374207761697420666f7220746865207265667265736820636f6f6c646f60008201527f776e2073696e6365206c61737420726566726573680000000000000000000000602082015250565b7f436f6c6c61746572616c20526174696f20686173206265656e20706175736564600082015250565b611d7781611b37565b8114611d8257600080fd5b50565b611d8e81611b75565b8114611d9957600080fd5b5056fea264697066735822122014323bd57532cf7c4a267ab36b070639fdfcb22fdf04bbd285fd405d0a4a3fe664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80636140133b116100f9578063ac4f843e11610097578063bef40ec811610071578063bef40ec81461044d578063c03f7be314610457578063f0f4426014610475578063f2fde38b14610491576101c4565b8063ac4f843e146103f3578063af83136e14610411578063b16ce4601461042f576101c4565b8063715018a6116100d3578063715018a61461038f57806387a140c3146103995780638da5cb5b146103b7578063a445c445146103d5576101c4565b80636140133b1461033757806361d027b3146103535780636ae7448814610371576101c4565b80632cb4f63e116101665780634013124a116101405780634013124a146102d7578063408ab10f146102e1578063485cc955146102fd57806351adeb5714610319576101c4565b80632cb4f63e1461027f578063362d5ae31461029d5780634006311b146102b9576101c4565b80631dc43637116101a25780631dc436371461021d5780632853fb1014610239578063291878a8146102575780632988b66d14610261576101c4565b80630ca687dc146101c9578063186d9b2e146101e55780631c5df1e514610201575b600080fd5b6101e360048036038101906101de91906116cb565b6104ad565b005b6101ff60048036038101906101fa9190611730565b6105dd565b005b61021b60048036038101906102169190611730565b610663565b005b61023760048036038101906102329190611782565b6106e9565b005b6102416107cc565b60405161024e91906119f6565b60405180910390f35b61025f6107d2565b005b61026961087a565b60405161027691906118fb565b60405180910390f35b61028761088d565b60405161029491906119f6565b60405180910390f35b6102b760048036038101906102b291906116cb565b610893565b005b6102c16109c3565b6040516102ce91906119f6565b60405180910390f35b6102df6109c9565b005b6102fb60048036038101906102f69190611730565b610c17565b005b610317600480360381019061031291906116f4565b610c9d565b005b610321610e09565b60405161032e91906118e0565b60405180910390f35b610351600480360381019061034c9190611730565b610e2f565b005b61035b610eb5565b60405161036891906118e0565b60405180910390f35b610379610edb565b60405161038691906119f6565b60405180910390f35b610397610ee1565b005b6103a161101b565b6040516103ae91906118fb565b60405180910390f35b6103bf61102e565b6040516103cc91906118e0565b60405180910390f35b6103dd611057565b6040516103ea91906119f6565b60405180910390f35b6103fb61120e565b60405161040891906119f6565b60405180910390f35b610419611214565b60405161042691906119f6565b60405180910390f35b61043761121a565b60405161044491906118e0565b60405180910390f35b610455611240565b005b61045f6112e8565b60405161046c91906119f6565b60405180910390f35b61048f600480360381019061048a91906116cb565b6112ee565b005b6104ab60048036038101906104a691906116cb565b611483565b005b6104b561162c565b73ffffffffffffffffffffffffffffffffffffffff166104d361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059090611976565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6105e561162c565b73ffffffffffffffffffffffffffffffffffffffff1661060361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090611996565b60405180910390fd5b8060088190555050565b61066b61162c565b73ffffffffffffffffffffffffffffffffffffffff1661068961102e565b73ffffffffffffffffffffffffffffffffffffffff16146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690611996565b60405180910390fd5b8060078190555050565b6106f161162c565b73ffffffffffffffffffffffffffffffffffffffff1661070f61102e565b73ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c90611996565b60405180910390fd5b620f4240821115801561077b5750620f42408111155b6107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190611936565b60405180910390fd5b81600481905550806005819055505050565b600a5481565b6107da61162c565b73ffffffffffffffffffffffffffffffffffffffff166107f861102e565b73ffffffffffffffffffffffffffffffffffffffff161461084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590611996565b60405180910390fd5b600b60019054906101000a900460ff1615600b60016101000a81548160ff021916908315150217905550565b600b60019054906101000a900460ff1681565b60095481565b61089b61162c565b73ffffffffffffffffffffffffffffffffffffffff166108b961102e565b73ffffffffffffffffffffffffffffffffffffffff161461090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097690611976565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b60001515600b60009054906101000a900460ff16151514610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a16906119d6565b60405180910390fd5b60075460065442610a309190611b03565b1015610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a68906119b6565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637eeda7036040518163ffffffff1660e01b815260040160206040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b139190611759565b9050610b2c600a5460095461163490919063ffffffff16565b811115610b6e5760085460045411610b4b576000600481905550610b69565b610b6260085460045461164a90919063ffffffff16565b6004819055505b610bdb565b610b85600a5460095461164a90919063ffffffff16565b811015610bda57620f4240610ba760085460045461163490919063ffffffff16565b10610bbb57620f4240600481905550610bd9565b610bd260085460045461163490919063ffffffff16565b6004819055505b5b5b600b60019054906101000a900460ff1615610c0357610bf8611057565b600581905550610c0d565b6004546005819055505b4260068190555050565b610c1f61162c565b73ffffffffffffffffffffffffffffffffffffffff16610c3d61102e565b73ffffffffffffffffffffffffffffffffffffffff1614610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a90611996565b60405180910390fd5b8060098190555050565b610ca561162c565b73ffffffffffffffffffffffffffffffffffffffff16610cc361102e565b73ffffffffffffffffffffffffffffffffffffffff1614610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1090611996565b60405180910390fd5b600060159054906101000a900460ff1680610d415750600060149054906101000a900460ff16155b610d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7790611956565b60405180910390fd5b60008060159054906101000a900460ff161590508015610dd1576001600060156101000a81548160ff0219169083151502179055506001600060146101000a81548160ff0219169083151502179055505b610dda836112ee565b610de382610893565b8015610e045760008060156101000a81548160ff0219169083151502179055505b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e3761162c565b73ffffffffffffffffffffffffffffffffffffffff16610e5561102e565b73ffffffffffffffffffffffffffffffffffffffff1614610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea290611996565b60405180910390fd5b80600a8190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b610ee961162c565b73ffffffffffffffffffffffffffffffffffffffff16610f0761102e565b73ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5490611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600b60009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600b60019054906101000a900460ff1661107757600454905061120b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2d97b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111199190611759565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118557600080fd5b505afa158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd9190611759565b905060006111e9826111db620f42408661166090919063ffffffff16565b61167690919063ffffffff16565b9050620f424081111561120457620f4240935050505061120b565b8093505050505b90565b60085481565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61124861162c565b73ffffffffffffffffffffffffffffffffffffffff1661126661102e565b73ffffffffffffffffffffffffffffffffffffffff16146112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b390611996565b60405180910390fd5b600b60009054906101000a900460ff1615600b60006101000a81548160ff021916908315150217905550565b60075481565b6112f661162c565b73ffffffffffffffffffffffffffffffffffffffff1661131461102e565b73ffffffffffffffffffffffffffffffffffffffff161461136a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136190611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d190611976565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60860405160405180910390a250565b61148b61162c565b73ffffffffffffffffffffffffffffffffffffffff166114a961102e565b73ffffffffffffffffffffffffffffffffffffffff16146114ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f690611996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690611916565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081836116429190611a22565b905092915050565b600081836116589190611b03565b905092915050565b6000818361166e9190611aa9565b905092915050565b600081836116849190611a78565b905092915050565b60008135905061169b81611d6e565b92915050565b6000813590506116b081611d85565b92915050565b6000815190506116c581611d85565b92915050565b6000602082840312156116dd57600080fd5b60006116eb8482850161168c565b91505092915050565b6000806040838503121561170757600080fd5b60006117158582860161168c565b92505060206117268582860161168c565b9150509250929050565b60006020828403121561174257600080fd5b6000611750848285016116a1565b91505092915050565b60006020828403121561176b57600080fd5b6000611779848285016116b6565b91505092915050565b6000806040838503121561179557600080fd5b60006117a3858286016116a1565b92505060206117b4858286016116a1565b9150509250929050565b6117c781611b37565b82525050565b6117d681611b49565b82525050565b60006117e9602683611a11565b91506117f482611bdd565b604082019050919050565b600061180c600c83611a11565b915061181782611c2c565b602082019050919050565b600061182f602e83611a11565b915061183a82611c55565b604082019050919050565b6000611852600e83611a11565b915061185d82611ca4565b602082019050919050565b6000611875602083611a11565b915061188082611ccd565b602082019050919050565b6000611898603583611a11565b91506118a382611cf6565b604082019050919050565b60006118bb602083611a11565b91506118c682611d45565b602082019050919050565b6118da81611b75565b82525050565b60006020820190506118f560008301846117be565b92915050565b600060208201905061191060008301846117cd565b92915050565b6000602082019050818103600083015261192f816117dc565b9050919050565b6000602082019050818103600083015261194f816117ff565b9050919050565b6000602082019050818103600083015261196f81611822565b9050919050565b6000602082019050818103600083015261198f81611845565b9050919050565b600060208201905081810360008301526119af81611868565b9050919050565b600060208201905081810360008301526119cf8161188b565b9050919050565b600060208201905081810360008301526119ef816118ae565b9050919050565b6000602082019050611a0b60008301846118d1565b92915050565b600082825260208201905092915050565b6000611a2d82611b75565b9150611a3883611b75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a6d57611a6c611b7f565b5b828201905092915050565b6000611a8382611b75565b9150611a8e83611b75565b925082611a9e57611a9d611bae565b5b828204905092915050565b6000611ab482611b75565b9150611abf83611b75565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611af857611af7611b7f565b5b828202905092915050565b6000611b0e82611b75565b9150611b1983611b75565b925082821015611b2c57611b2b611b7f565b5b828203905092915050565b6000611b4282611b55565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c6964526174696f0000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f696e76616c696441646472657373000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d757374207761697420666f7220746865207265667265736820636f6f6c646f60008201527f776e2073696e6365206c61737420726566726573680000000000000000000000602082015250565b7f436f6c6c61746572616c20526174696f20686173206265656e20706175736564600082015250565b611d7781611b37565b8114611d8257600080fd5b50565b611d8e81611b75565b8114611d9957600080fd5b5056fea264697066735822122014323bd57532cf7c4a267ab36b070639fdfcb22fdf04bbd285fd405d0a4a3fe664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 51,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 54,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1727,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "oracleDollar",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1729,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "dollar",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1731,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1740,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "target_collateral_ratio",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1743,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "effective_collateral_ratio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1745,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "last_refresh_cr_timestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1747,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "refresh_cooldown",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1749,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "ratio_step",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1751,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "price_target",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1753,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "price_band",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1756,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "collateral_ratio_paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 1759,
        "contract": "contracts/CollateralRatioPolicy.sol:CollateralRatioPolicy",
        "label": "using_effective_collateral_ratio",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}