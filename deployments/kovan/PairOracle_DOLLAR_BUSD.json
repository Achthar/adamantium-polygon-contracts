{
  "address": "0xbCCd161B20B22EDe4F0E56155511dF74EAccF4e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mockPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mockPrice",
          "type": "uint256"
        }
      ],
      "name": "mock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dba5d1e24fc3ce56a572e8dd8d2117d4086f3a818136db664ee15d99d5b1559",
  "receipt": {
    "to": null,
    "from": "0x333132d4FCbe1B7F34198AD545672BbA95c5882b",
    "contractAddress": "0xbCCd161B20B22EDe4F0E56155511dF74EAccF4e3",
    "transactionIndex": 2,
    "gasUsed": "623229",
    "logsBloom": "0x
    "blockHash": "0x2523abfcc42858b2986a9635824073289aecc39d379e6db3f91d5835a4ee1723",
    "transactionHash": "0x8dba5d1e24fc3ce56a572e8dd8d2117d4086f3a818136db664ee15d99d5b1559",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26666415,
        "transactionHash": "0x8dba5d1e24fc3ce56a572e8dd8d2117d4086f3a818136db664ee15d99d5b1559",
        "address": "0xbCCd161B20B22EDe4F0E56155511dF74EAccF4e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000333132d4fcbe1b7f34198ad545672bba95c5882b"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x2523abfcc42858b2986a9635824073289aecc39d379e6db3f91d5835a4ee1723"
      }
    ],
    "blockNumber": 26666415,
    "cumulativeGasUsed": "774769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1003000
  ],
  "solcInputHash": "528e37ad3cee8dde3b849d6f9ffe4ef0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mockPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mockPrice\",\"type\":\"uint256\"}],\"name\":\"mock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/_mock/oracle/MockPairOracle.sol\":\"MockPairOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/_mock/oracle/MockPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IPairOracle.sol\\\";\\n\\ncontract MockPairOracle is IPairOracle, Ownable {\\n    uint256 public mockPrice;\\n    uint256 internal constant PRICE_PRECISION = 1e6;\\n    uint256 public PERIOD = 3600; // 1 hour TWAP (time-weighted average price)\\n\\n    constructor(uint256 _mockPrice) {\\n        mockPrice = _mockPrice;\\n    }\\n\\n    function consult(address, uint256 amountIn) external view override returns (uint256 amountOut) {\\n        return (mockPrice * amountIn) / PRICE_PRECISION;\\n    }\\n\\n    function update() external override {}\\n\\n    function setPeriod(uint256 _period) external onlyOwner {\\n        PERIOD = _period;\\n    }\\n\\n    function mock(uint256 _mockPrice) external {\\n        mockPrice = _mockPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xd45bc64c2f23027e38142069ee3d3a570d59ec2862fc8b04539207f8c3a41742\",\"license\":\"MIT\"},\"contracts/interfaces/IPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPairOracle {\\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\\n\\n    function update() external;\\n}\\n\",\"keccak256\":\"0x2f398bf9958e4c4b69ddfa4e27cd33b9e19622f5fc697cbe305fbf01a65a4060\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610e1060025534801561001657600080fd5b50604051610a6f380380610a6f83398181016040528101906100389190610110565b60006100486100f360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350806001819055505061015a565b600033905090565b60008151905061010a81610143565b92915050565b60006020828403121561012257600080fd5b6000610130848285016100fb565b91505092915050565b6000819050919050565b61014c81610139565b811461015757600080fd5b50565b610906806101696000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461010a578063a2e6204514610128578063b4d1d79514610132578063c7207e7414610150578063f2fde38b1461016e57610093565b80630f3a9f65146100985780633ddac953146100b45780633de377ec146100e4578063715018a614610100575b600080fd5b6100b260048036038101906100ad91906105f1565b61018a565b005b6100ce60048036038101906100c991906105b5565b610210565b6040516100db91906106d9565b60405180910390f35b6100fe60048036038101906100f991906105f1565b610236565b005b610108610240565b005b61011261037a565b60405161011f919061067e565b60405180910390f35b6101306103a3565b005b61013a6103a5565b60405161014791906106d9565b60405180910390f35b6101586103ab565b60405161016591906106d9565b60405180910390f35b6101886004803603810190610183919061058c565b6103b1565b005b61019261055a565b73ffffffffffffffffffffffffffffffffffffffff166101b061037a565b73ffffffffffffffffffffffffffffffffffffffff1614610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd906106b9565b60405180910390fd5b8060028190555050565b6000620f4240826001546102249190610736565b61022e9190610705565b905092915050565b8060018190555050565b61024861055a565b73ffffffffffffffffffffffffffffffffffffffff1661026661037a565b73ffffffffffffffffffffffffffffffffffffffff16146102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b3906106b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b565b60025481565b60015481565b6103b961055a565b73ffffffffffffffffffffffffffffffffffffffff166103d761037a565b73ffffffffffffffffffffffffffffffffffffffff161461042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906106b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049490610699565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081359050610571816108a2565b92915050565b600081359050610586816108b9565b92915050565b60006020828403121561059e57600080fd5b60006105ac84828501610562565b91505092915050565b600080604083850312156105c857600080fd5b60006105d685828601610562565b92505060206105e785828601610577565b9150509250929050565b60006020828403121561060357600080fd5b600061061184828501610577565b91505092915050565b61062381610790565b82525050565b60006106366026836106f4565b91506106418261082a565b604082019050919050565b60006106596020836106f4565b915061066482610879565b602082019050919050565b610678816107c2565b82525050565b6000602082019050610693600083018461061a565b92915050565b600060208201905081810360008301526106b281610629565b9050919050565b600060208201905081810360008301526106d28161064c565b9050919050565b60006020820190506106ee600083018461066f565b92915050565b600082825260208201905092915050565b6000610710826107c2565b915061071b836107c2565b92508261072b5761072a6107fb565b5b828204905092915050565b6000610741826107c2565b915061074c836107c2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610785576107846107cc565b5b828202905092915050565b600061079b826107a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6108ab81610790565b81146108b657600080fd5b50565b6108c2816107c2565b81146108cd57600080fd5b5056fea2646970667358221220fcb171f3a7a8e4c2958b0d4fe19a5e032088f9d42f9a0db3f1b2dfc7b2f2180b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461010a578063a2e6204514610128578063b4d1d79514610132578063c7207e7414610150578063f2fde38b1461016e57610093565b80630f3a9f65146100985780633ddac953146100b45780633de377ec146100e4578063715018a614610100575b600080fd5b6100b260048036038101906100ad91906105f1565b61018a565b005b6100ce60048036038101906100c991906105b5565b610210565b6040516100db91906106d9565b60405180910390f35b6100fe60048036038101906100f991906105f1565b610236565b005b610108610240565b005b61011261037a565b60405161011f919061067e565b60405180910390f35b6101306103a3565b005b61013a6103a5565b60405161014791906106d9565b60405180910390f35b6101586103ab565b60405161016591906106d9565b60405180910390f35b6101886004803603810190610183919061058c565b6103b1565b005b61019261055a565b73ffffffffffffffffffffffffffffffffffffffff166101b061037a565b73ffffffffffffffffffffffffffffffffffffffff1614610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd906106b9565b60405180910390fd5b8060028190555050565b6000620f4240826001546102249190610736565b61022e9190610705565b905092915050565b8060018190555050565b61024861055a565b73ffffffffffffffffffffffffffffffffffffffff1661026661037a565b73ffffffffffffffffffffffffffffffffffffffff16146102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b3906106b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b565b60025481565b60015481565b6103b961055a565b73ffffffffffffffffffffffffffffffffffffffff166103d761037a565b73ffffffffffffffffffffffffffffffffffffffff161461042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906106b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049490610699565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081359050610571816108a2565b92915050565b600081359050610586816108b9565b92915050565b60006020828403121561059e57600080fd5b60006105ac84828501610562565b91505092915050565b600080604083850312156105c857600080fd5b60006105d685828601610562565b92505060206105e785828601610577565b9150509250929050565b60006020828403121561060357600080fd5b600061061184828501610577565b91505092915050565b61062381610790565b82525050565b60006106366026836106f4565b91506106418261082a565b604082019050919050565b60006106596020836106f4565b915061066482610879565b602082019050919050565b610678816107c2565b82525050565b6000602082019050610693600083018461061a565b92915050565b600060208201905081810360008301526106b281610629565b9050919050565b600060208201905081810360008301526106d28161064c565b9050919050565b60006020820190506106ee600083018461066f565b92915050565b600082825260208201905092915050565b6000610710826107c2565b915061071b836107c2565b92508261072b5761072a6107fb565b5b828204905092915050565b6000610741826107c2565b915061074c836107c2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610785576107846107cc565b5b828202905092915050565b600061079b826107a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6108ab81610790565b81146108b657600080fd5b50565b6108c2816107c2565b81146108cd57600080fd5b5056fea2646970667358221220fcb171f3a7a8e4c2958b0d4fe19a5e032088f9d42f9a0db3f1b2dfc7b2f2180b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/_mock/oracle/MockPairOracle.sol:MockPairOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8108,
        "contract": "contracts/_mock/oracle/MockPairOracle.sol:MockPairOracle",
        "label": "mockPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8114,
        "contract": "contracts/_mock/oracle/MockPairOracle.sol:MockPairOracle",
        "label": "PERIOD",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}