{
  "address": "0xa4B759Cf9bA1B49447F7A396ea90b2Ee671c8D0b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dollar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dollar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_share",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "last_redeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateral_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dollar_out_min",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dollar_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share_out_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateral_out_min",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeem_collateral_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeem_share_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemption_delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemption_delay",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "share",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleRedeeming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimed_pool_collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimed_pool_share",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xff2203f8df15db3f00b53d00c2d674127ae92315fe09602288e2cd8bb9683b9b",
  "receipt": {
    "to": null,
    "from": "0x333132d4FCbe1B7F34198AD545672BbA95c5882b",
    "contractAddress": "0xa4B759Cf9bA1B49447F7A396ea90b2Ee671c8D0b",
    "transactionIndex": 1,
    "gasUsed": "3097742",
    "logsBloom": "0x
    "blockHash": "0x22dffeeb4ac86891acdc4495ef8daa5433f4d442058628f8ce11f713a2b499e5",
    "transactionHash": "0xff2203f8df15db3f00b53d00c2d674127ae92315fe09602288e2cd8bb9683b9b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26666400,
        "transactionHash": "0xff2203f8df15db3f00b53d00c2d674127ae92315fe09602288e2cd8bb9683b9b",
        "address": "0xa4B759Cf9bA1B49447F7A396ea90b2Ee671c8D0b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000333132d4fcbe1b7f34198ad545672bba95c5882b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x22dffeeb4ac86891acdc4495ef8daa5433f4d442058628f8ce11f713a2b499e5"
      }
    ],
    "blockNumber": 26666400,
    "cumulativeGasUsed": "3131612",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "528e37ad3cee8dde3b849d6f9ffe4ef0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_redeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dollar_out_min\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollar_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateral_out_min\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem_collateral_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem_share_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemption_delay\",\"type\":\"uint256\"}],\"name\":\"setRedemptionDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimed_pool_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimed_pool_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IShare.sol\\\";\\nimport \\\"./interfaces/IDollar.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\ncontract Pool is Ownable, ReentrancyGuard, Initializable, IPool {\\n    using SafeERC20 for ERC20;\\n\\n    /* ========== ADDRESSES ================ */\\n    address public oracle;\\n    address public collateral;\\n    address public dollar;\\n    address public treasury;\\n    address public share;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    mapping(address => uint256) public redeem_share_balances;\\n    mapping(address => uint256) public redeem_collateral_balances;\\n\\n    uint256 public override unclaimed_pool_collateral;\\n    uint256 public unclaimed_pool_share;\\n\\n    mapping(address => uint256) public last_redeemed;\\n\\n    // Constants for various precisions\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    uint256 private constant COLLATERAL_RATIO_PRECISION = 1e6;\\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\\n\\n    // Number of decimals needed to get to 18\\n    uint256 private missing_decimals;\\n\\n    // Number of blocks to wait before being able to collectRedemption()\\n    uint256 public redemption_delay = 1;\\n\\n    // AccessControl state variables\\n    bool public mint_paused = false;\\n    bool public redeem_paused = false;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyTreasury() {\\n        require(msg.sender == treasury, \\\"!treasury\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        address _dollar,\\n        address _share,\\n        address _collateral,\\n        address _treasury\\n    ) external initializer onlyOwner {\\n        dollar = _dollar;\\n        share = _share;\\n        collateral = _collateral;\\n        treasury = _treasury;\\n        missing_decimals = 18 - ERC20(_collateral).decimals();\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function info()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        )\\n    {\\n        return (\\n            unclaimed_pool_collateral, // unclaimed amount of COLLATERAL\\n            unclaimed_pool_share, // unclaimed amount of SHARE\\n            getCollateralPrice(), // collateral price\\n            mint_paused,\\n            redeem_paused\\n        );\\n    }\\n\\n    function collateralReserve() public view returns (address) {\\n        return ITreasury(treasury).collateralReserve();\\n    }\\n\\n    function getCollateralPrice() public view override returns (uint256) {\\n        return IOracle(oracle).consult();\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function mint(\\n        uint256 _collateral_amount,\\n        uint256 _share_amount,\\n        uint256 _dollar_out_min\\n    ) external {\\n        require(mint_paused == false, \\\"Minting is paused\\\");\\n        (, uint256 _share_price, , uint256 _tcr, , , uint256 _minting_fee, ) = ITreasury(treasury).info();\\n        require(_share_price > 0, \\\"Invalid share price\\\");\\n        uint256 _price_collateral = getCollateralPrice();\\n        uint256 _total_dollar_value = 0;\\n        uint256 _required_share_amount = 0;\\n        if (_tcr > 0) {\\n            uint256 _collateral_value = ((_collateral_amount * (10**missing_decimals)) * _price_collateral) / PRICE_PRECISION;\\n            _total_dollar_value = (_collateral_value * COLLATERAL_RATIO_PRECISION) / _tcr;\\n            if (_tcr < COLLATERAL_RATIO_MAX) {\\n                _required_share_amount = ((_total_dollar_value - _collateral_value) * PRICE_PRECISION) / _share_price;\\n            }\\n        } else {\\n            _total_dollar_value = (_share_amount * _share_price) / PRICE_PRECISION;\\n            _required_share_amount = _share_amount;\\n        }\\n        uint256 _actual_dollar_amount = _total_dollar_value - ((_total_dollar_value * _minting_fee) / PRICE_PRECISION);\\n        require(_dollar_out_min <= _actual_dollar_amount, \\\"slippage\\\");\\n\\n        if (_required_share_amount > 0) {\\n            require(_required_share_amount <= _share_amount, \\\"Not enough SHARE input\\\");\\n            IShare(share).poolBurnFrom(msg.sender, _required_share_amount);\\n        }\\n        if (_collateral_amount > 0) {\\n            _transferCollateralToReserve(msg.sender, _collateral_amount);\\n        }\\n        IDollar(dollar).poolMint(msg.sender, _actual_dollar_amount);\\n    }\\n\\n    function redeem(\\n        uint256 _dollar_amount,\\n        uint256 _share_out_min,\\n        uint256 _collateral_out_min\\n    ) external {\\n        require(redeem_paused == false, \\\"Redeeming is paused\\\");\\n        (, uint256 _share_price, , , uint256 _ecr, , , uint256 _redemption_fee) = ITreasury(treasury).info();\\n        uint256 _collateral_price = getCollateralPrice();\\n        require(_collateral_price > 0, \\\"Invalid collateral price\\\");\\n        require(_share_price > 0, \\\"Invalid share price\\\");\\n        uint256 _dollar_amount_post_fee = _dollar_amount - ((_dollar_amount * _redemption_fee) / PRICE_PRECISION);\\n        uint256 _collateral_output_amount = 0;\\n        uint256 _share_output_amount = 0;\\n\\n        if (_ecr < COLLATERAL_RATIO_MAX) {\\n            uint256 _share_output_value = _dollar_amount_post_fee - ((_dollar_amount_post_fee * _ecr) / PRICE_PRECISION);\\n            _share_output_amount = (_share_output_value * PRICE_PRECISION) / _share_price;\\n        }\\n\\n        if (_ecr > 0) {\\n            uint256 _collateral_output_value = ((_dollar_amount_post_fee * _ecr) / PRICE_PRECISION) / (10**missing_decimals);\\n            _collateral_output_amount = (_collateral_output_value * PRICE_PRECISION) / _collateral_price;\\n        }\\n\\n        // Check if collateral balance meets and meet output expectation\\n        uint256 _totalCollateralBalance = ITreasury(treasury).globalCollateralBalance();\\n        require(_collateral_output_amount <= _totalCollateralBalance, \\\"<collateralBalance\\\");\\n        require(_collateral_out_min <= _collateral_output_amount && _share_out_min <= _share_output_amount, \\\">slippage\\\");\\n\\n        if (_collateral_output_amount > 0) {\\n            redeem_collateral_balances[msg.sender] = redeem_collateral_balances[msg.sender] + _collateral_output_amount;\\n            unclaimed_pool_collateral = unclaimed_pool_collateral + _collateral_output_amount;\\n        }\\n\\n        if (_share_output_amount > 0) {\\n            redeem_share_balances[msg.sender] = redeem_share_balances[msg.sender] + _share_output_amount;\\n            unclaimed_pool_share = unclaimed_pool_share + _share_output_amount;\\n        }\\n\\n        last_redeemed[msg.sender] = block.number;\\n\\n        // Move all external functions to the end\\n        IDollar(dollar).poolBurnFrom(msg.sender, _dollar_amount);\\n        if (_share_output_amount > 0) {\\n            _mintShareToCollateralReserve(_share_output_amount);\\n        }\\n    }\\n\\n    function collectRedemption() external {\\n        require((last_redeemed[msg.sender] + redemption_delay) <= block.number, \\\"<redemption_delay\\\");\\n\\n        bool _send_share = false;\\n        bool _send_collateral = false;\\n        uint256 _share_amount;\\n        uint256 _collateral_amount;\\n\\n        // Use Checks-Effects-Interactions pattern\\n        if (redeem_share_balances[msg.sender] > 0) {\\n            _share_amount = redeem_share_balances[msg.sender];\\n            redeem_share_balances[msg.sender] = 0;\\n            unclaimed_pool_share = unclaimed_pool_share - _share_amount;\\n            _send_share = true;\\n        }\\n\\n        if (redeem_collateral_balances[msg.sender] > 0) {\\n            _collateral_amount = redeem_collateral_balances[msg.sender];\\n            redeem_collateral_balances[msg.sender] = 0;\\n            unclaimed_pool_collateral = unclaimed_pool_collateral - _collateral_amount;\\n            _send_collateral = true;\\n        }\\n\\n        if (_send_share) {\\n            _requestTransferShare(msg.sender, _share_amount);\\n        }\\n\\n        if (_send_collateral) {\\n            _requestTransferCollateral(msg.sender, _collateral_amount);\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _transferCollateralToReserve(address _sender, uint256 _amount) internal {\\n        address _reserve = collateralReserve();\\n        require(_reserve != address(0), \\\"Invalid reserve address\\\");\\n        ERC20(collateral).safeTransferFrom(_sender, _reserve, _amount);\\n    }\\n\\n    function _mintShareToCollateralReserve(uint256 _amount) internal {\\n        address _reserve = collateralReserve();\\n        require(_reserve != address(0), \\\"Invalid reserve address\\\");\\n        IShare(share).poolMint(_reserve, _amount);\\n    }\\n\\n    function _requestTransferCollateral(address _receiver, uint256 _amount) internal {\\n        ITreasury(treasury).requestTransfer(collateral, _receiver, _amount);\\n    }\\n\\n    function _requestTransferShare(address _receiver, uint256 _amount) internal {\\n        ITreasury(treasury).requestTransfer(share, _receiver, _amount);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function toggleMinting() external onlyOwner {\\n        mint_paused = !mint_paused;\\n    }\\n\\n    function toggleRedeeming() external onlyOwner {\\n        redeem_paused = !redeem_paused;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOwner {\\n        require(_oracle != address(0), \\\"Invalid address\\\");\\n        oracle = _oracle;\\n    }\\n\\n    function setRedemptionDelay(uint256 _redemption_delay) external onlyOwner {\\n        redemption_delay = _redemption_delay;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Invalid address\\\");\\n        treasury = _treasury;\\n        emit TreasuryChanged(_treasury);\\n    }\\n\\n    // EVENTS\\n    event TreasuryChanged(address indexed newTreasury);\\n}\\n\",\"keccak256\":\"0x434b080711328345cc7d993b5f74332ba1fb9ade8e89e90682de458361f885e7\",\"license\":\"MIT\"},\"contracts/interfaces/IDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDollar {\\n    function poolBurnFrom(address _address, uint256 _amount) external;\\n\\n    function poolMint(address _address, uint256 m_amount) external;\\n}\\n\",\"keccak256\":\"0x354462953c684f3edc064714381ceb744cf8fc109f68c42bbdec6a3d90f521a2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IOracle {\\n    function consult() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79923f4195fb06084d97d894147a9191266f6afc4a381c51d50b29b3509c2058\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPool {\\n    function getCollateralPrice() external view returns (uint256);\\n\\n    function unclaimed_pool_collateral() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ca8417a9740cfc3f7508c3320e876e22f340bea94cae6c2a3c31f0eac21aae0\",\"license\":\"MIT\"},\"contracts/interfaces/IShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IShare {\\n    function poolBurnFrom(address _address, uint256 _amount) external;\\n\\n    function poolMint(address _address, uint256 m_amount) external;\\n}\\n\",\"keccak256\":\"0xdd4c81f597e5f14cbc310de90307c0e4864287d7309fa2f39eef9f188d5ddb92\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITreasury {\\n    function hasPool(address _address) external view returns (bool);\\n\\n    function collateralReserve() external view returns (address);\\n\\n    function globalCollateralBalance() external view returns (uint256);\\n\\n    function globalCollateralValue() external view returns (uint256);\\n\\n    function requestTransfer(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n\\n    function info()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x34f769aad18cccd1da2fab55987f2130127388104a28b308f4eb428faf90c168\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a8d5fd65116100f9578063dc0d2a9811610097578063f2fde38b11610071578063f2fde38b14610479578063f7683bbc14610495578063f8c8765e146104b3578063ff626c5f146104cf576101c4565b8063dc0d2a9814610411578063f0f4426014610441578063f1a9ee031461045d576101c4565b8063c82c4d0e116100d3578063c82c4d0e1461039b578063d0d132f3146103b9578063d8dfeb45146103e9578063daa5048514610407576101c4565b8063a8d5fd6514610343578063b819220514610361578063c7d272281461037d576101c4565b806361d027b3116101665780637d55094d116101405780637d55094d146102df5780637dc0d1d0146102e957806380a66d05146103075780638da5cb5b14610325576101c4565b806361d027b31461029b578063715018a6146102b95780637adbf973146102c3576101c4565b8063370158ea116101a2578063370158ea1461020d578063465b0c411461022f57806351adeb571461024d578063543671351461026b576101c4565b806302acc94b146101c957806312ace5a2146101e557806315128425146101ef575b600080fd5b6101e360048036038101906101de91906126b6565b6104ed565b005b6101ed6108f2565b005b6101f7610b7f565b6040516102049190612db9565b60405180910390f35b610215610b85565b604051610226959493929190612dd4565b60405180910390f35b610237610bcc565b6040516102449190612ae1565b60405180910390f35b610255610c73565b6040516102629190612ae1565b60405180910390f35b61028560048036038101906102809190612586565b610c99565b6040516102929190612db9565b60405180910390f35b6102a3610cb1565b6040516102b09190612ae1565b60405180910390f35b6102c1610cd7565b005b6102dd60048036038101906102d89190612586565b610e11565b005b6102e7610f40565b005b6102f1610fe8565b6040516102fe9190612ae1565b60405180910390f35b61030f61100c565b60405161031c9190612b5c565b60405180910390f35b61032d61101f565b60405161033a9190612ae1565b60405180910390f35b61034b611048565b6040516103589190612ae1565b60405180910390f35b61037b600480360381019061037691906126b6565b61106e565b005b610385611664565b6040516103929190612b5c565b60405180910390f35b6103a3611677565b6040516103b09190612db9565b60405180910390f35b6103d360048036038101906103ce9190612586565b61167d565b6040516103e09190612db9565b60405180910390f35b6103f1611695565b6040516103fe9190612ae1565b60405180910390f35b61040f6116bb565b005b61042b60048036038101906104269190612586565b611763565b6040516104389190612db9565b60405180910390f35b61045b60048036038101906104569190612586565b61177b565b005b61047760048036038101906104729190612664565b6118ee565b005b610493600480360381019061048e9190612586565b611974565b005b61049d611b1d565b6040516104aa9190612db9565b60405180910390f35b6104cd60048036038101906104c891906125d8565b611bc2565b005b6104d7611eb7565b6040516104e49190612db9565b60405180910390f35b60001515600e60009054906101000a900460ff16151514610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053a90612d59565b60405180910390fd5b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b81526004016101006040518083038186803b1580156105b157600080fd5b505afa1580156105c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e99190612705565b509650505094505093505060008311610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90612d39565b60405180910390fd5b6000610641611b1d565b905060008060008511156106db576000620f424084600c54600a6106659190612f33565b8c6106709190613051565b61067a9190613051565b6106849190612eaf565b905085620f4240826106969190613051565b6106a09190612eaf565b9250620f42408610156106d55786620f424082856106be91906130ab565b6106c89190613051565b6106d29190612eaf565b91505b506106fb565b620f424086896106eb9190613051565b6106f59190612eaf565b91508790505b6000620f4240858461070d9190613051565b6107179190612eaf565b8361072291906130ab565b905080881115610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90612bb9565b60405180910390fd5b600082111561084357888211156107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90612bd9565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a0c165a33846040518363ffffffff1660e01b8152600401610810929190612b33565b600060405180830381600087803b15801561082a57600080fd5b505af115801561083e573d6000803e3d6000fd5b505050505b60008a111561085757610856338b611ebd565b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c407d5633836040518363ffffffff1660e01b81526004016108b4929190612b33565b600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b5050505050505050505050505050565b43600d54600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109409190612e59565b1115610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097890612cf9565b60405180910390fd5b6000806000806000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610a6f57600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600a54610a6491906130ab565b600a81905550600193505b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610b5757600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600954610b4c91906130ab565b600981905550600192505b8315610b6857610b673383611f8d565b5b8215610b7957610b783382612044565b5b50505050565b600d5481565b6000806000806000600954600a54610b9b611b1d565b600e60009054906101000a900460ff16600e60019054906101000a900460ff16945094509450945094509091929394565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663465b0c416040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3657600080fd5b505afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906125af565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cdf6120fb565b73ffffffffffffffffffffffffffffffffffffffff16610cfd61101f565b73ffffffffffffffffffffffffffffffffffffffff1614610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90612d19565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610e196120fb565b73ffffffffffffffffffffffffffffffffffffffff16610e3761101f565b73ffffffffffffffffffffffffffffffffffffffff1614610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490612d19565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef490612b99565b60405180910390fd5b806002806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f486120fb565b73ffffffffffffffffffffffffffffffffffffffff16610f6661101f565b73ffffffffffffffffffffffffffffffffffffffff1614610fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb390612d19565b60405180910390fd5b600e60009054906101000a900460ff1615600e60006101000a81548160ff021916908315150217905550565b60028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60001515600e60019054906101000a900460ff161515146110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb90612c79565b60405180910390fd5b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b81526004016101006040518083038186803b15801561113257600080fd5b505afa158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a9190612705565b9750505095505050935050600061117f611b1d565b9050600081116111c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bb90612bf9565b60405180910390fd5b60008411611207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fe90612d39565b60405180910390fd5b6000620f424083896112199190613051565b6112239190612eaf565b8861122e91906130ab565b9050600080620f4240861015611285576000620f424087856112509190613051565b61125a9190612eaf565b8461126591906130ab565b905087620f4240826112779190613051565b6112819190612eaf565b9150505b60008611156112e3576000600c54600a61129f9190612f33565b620f424088866112af9190613051565b6112b99190612eaf565b6112c39190612eaf565b905084620f4240826112d59190613051565b6112df9190612eaf565b9250505b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636912cb436040518163ffffffff1660e01b815260040160206040518083038186803b15801561134d57600080fd5b505afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611385919061268d565b9050808311156113ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c190612c99565b60405180910390fd5b8289111580156113da5750818a11155b611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141090612cb9565b60405180910390fd5b60008311156114c55782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146d9190612e59565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826009546114be9190612e59565b6009819055505b60008211156115715781600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115199190612e59565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600a5461156a9190612e59565b600a819055505b43600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a0c165a338d6040518363ffffffff1660e01b8152600401611612929190612b33565b600060405180830381600087803b15801561162c57600080fd5b505af1158015611640573d6000803e3d6000fd5b5050505060008211156116575761165682612103565b5b5050505050505050505050565b600e60009054906101000a900460ff1681565b600a5481565b60086020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116c36120fb565b73ffffffffffffffffffffffffffffffffffffffff166116e161101f565b73ffffffffffffffffffffffffffffffffffffffff1614611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e90612d19565b60405180910390fd5b600e60019054906101000a900460ff1615600e60016101000a81548160ff021916908315150217905550565b600b6020528060005260406000206000915090505481565b6117836120fb565b73ffffffffffffffffffffffffffffffffffffffff166117a161101f565b73ffffffffffffffffffffffffffffffffffffffff16146117f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ee90612d19565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e90612b99565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60860405160405180910390a250565b6118f66120fb565b73ffffffffffffffffffffffffffffffffffffffff1661191461101f565b73ffffffffffffffffffffffffffffffffffffffff161461196a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196190612d19565b60405180910390fd5b80600d8190555050565b61197c6120fb565b73ffffffffffffffffffffffffffffffffffffffff1661199a61101f565b73ffffffffffffffffffffffffffffffffffffffff16146119f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e790612d19565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5790612c19565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637eeda7036040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8557600080fd5b505afa158015611b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbd919061268d565b905090565b600260019054906101000a900460ff1680611bea5750600260009054906101000a900460ff16155b611c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2090612cd9565b60405180910390fd5b6000600260019054906101000a900460ff161590508015611c7b576001600260016101000a81548160ff0219169083151502179055506001600260006101000a81548160ff0219169083151502179055505b611c836120fb565b73ffffffffffffffffffffffffffffffffffffffff16611ca161101f565b73ffffffffffffffffffffffffffffffffffffffff1614611cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cee90612d19565b60405180910390fd5b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4157600080fd5b505afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7991906127b7565b6012611e8591906130df565b60ff16600c819055508015611eb0576000600260016101000a81548160ff0219169083151502179055505b5050505050565b60095481565b6000611ec7610bcc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3090612c39565b60405180910390fd5b611f88838284600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612212909392919063ffffffff16565b505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4293ead600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b815260040161200e93929190612afc565b600060405180830381600087803b15801561202857600080fd5b505af115801561203c573d6000803e3d6000fd5b505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4293ead600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b81526004016120c593929190612afc565b600060405180830381600087803b1580156120df57600080fd5b505af11580156120f3573d6000803e3d6000fd5b505050505050565b600033905090565b600061210d610bcc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561217f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217690612c39565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c407d5682846040518363ffffffff1660e01b81526004016121dc929190612b33565b600060405180830381600087803b1580156121f657600080fd5b505af115801561220a573d6000803e3d6000fd5b505050505050565b612295846323b872dd60e01b85858560405160240161223393929190612afc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061229b565b50505050565b60006122fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123629092919063ffffffff16565b905060008151111561235d578080602001905181019061231d919061263b565b61235c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235390612d99565b60405180910390fd5b5b505050565b6060612371848460008561237a565b90509392505050565b6060824710156123bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b690612c59565b60405180910390fd5b6123c88561248e565b612407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fe90612d79565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124309190612aca565b60006040518083038185875af1925050503d806000811461246d576040519150601f19603f3d011682016040523d82523d6000602084013e612472565b606091505b50915091506124828282866124a1565b92505050949350505050565b600080823b905060008111915050919050565b606083156124b157829050612501565b6000835111156124c45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f89190612b77565b60405180910390fd5b9392505050565b60008135905061251781613568565b92915050565b60008151905061252c81613568565b92915050565b6000815190506125418161357f565b92915050565b60008135905061255681613596565b92915050565b60008151905061256b81613596565b92915050565b600081519050612580816135ad565b92915050565b60006020828403121561259857600080fd5b60006125a684828501612508565b91505092915050565b6000602082840312156125c157600080fd5b60006125cf8482850161251d565b91505092915050565b600080600080608085870312156125ee57600080fd5b60006125fc87828801612508565b945050602061260d87828801612508565b935050604061261e87828801612508565b925050606061262f87828801612508565b91505092959194509250565b60006020828403121561264d57600080fd5b600061265b84828501612532565b91505092915050565b60006020828403121561267657600080fd5b600061268484828501612547565b91505092915050565b60006020828403121561269f57600080fd5b60006126ad8482850161255c565b91505092915050565b6000806000606084860312156126cb57600080fd5b60006126d986828701612547565b93505060206126ea86828701612547565b92505060406126fb86828701612547565b9150509250925092565b600080600080600080600080610100898b03121561272257600080fd5b60006127308b828c0161255c565b98505060206127418b828c0161255c565b97505060406127528b828c0161255c565b96505060606127638b828c0161255c565b95505060806127748b828c0161255c565b94505060a06127858b828c0161255c565b93505060c06127968b828c0161255c565b92505060e06127a78b828c0161255c565b9150509295985092959890939650565b6000602082840312156127c957600080fd5b60006127d784828501612571565b91505092915050565b6127e981613113565b82525050565b6127f881613125565b82525050565b600061280982612e27565b6128138185612e3d565b9350612823818560208601613168565b80840191505092915050565b600061283a82612e32565b6128448185612e48565b9350612854818560208601613168565b61285d816131f9565b840191505092915050565b6000612875600f83612e48565b915061288082613217565b602082019050919050565b6000612898600883612e48565b91506128a382613240565b602082019050919050565b60006128bb601683612e48565b91506128c682613269565b602082019050919050565b60006128de601883612e48565b91506128e982613292565b602082019050919050565b6000612901602683612e48565b915061290c826132bb565b604082019050919050565b6000612924601783612e48565b915061292f8261330a565b602082019050919050565b6000612947602683612e48565b915061295282613333565b604082019050919050565b600061296a601383612e48565b915061297582613382565b602082019050919050565b600061298d601283612e48565b9150612998826133ab565b602082019050919050565b60006129b0600983612e48565b91506129bb826133d4565b602082019050919050565b60006129d3602e83612e48565b91506129de826133fd565b604082019050919050565b60006129f6601183612e48565b9150612a018261344c565b602082019050919050565b6000612a19602083612e48565b9150612a2482613475565b602082019050919050565b6000612a3c601383612e48565b9150612a478261349e565b602082019050919050565b6000612a5f601183612e48565b9150612a6a826134c7565b602082019050919050565b6000612a82601d83612e48565b9150612a8d826134f0565b602082019050919050565b6000612aa5602a83612e48565b9150612ab082613519565b604082019050919050565b612ac481613151565b82525050565b6000612ad682846127fe565b915081905092915050565b6000602082019050612af660008301846127e0565b92915050565b6000606082019050612b1160008301866127e0565b612b1e60208301856127e0565b612b2b6040830184612abb565b949350505050565b6000604082019050612b4860008301856127e0565b612b556020830184612abb565b9392505050565b6000602082019050612b7160008301846127ef565b92915050565b60006020820190508181036000830152612b91818461282f565b905092915050565b60006020820190508181036000830152612bb281612868565b9050919050565b60006020820190508181036000830152612bd28161288b565b9050919050565b60006020820190508181036000830152612bf2816128ae565b9050919050565b60006020820190508181036000830152612c12816128d1565b9050919050565b60006020820190508181036000830152612c32816128f4565b9050919050565b60006020820190508181036000830152612c5281612917565b9050919050565b60006020820190508181036000830152612c728161293a565b9050919050565b60006020820190508181036000830152612c928161295d565b9050919050565b60006020820190508181036000830152612cb281612980565b9050919050565b60006020820190508181036000830152612cd2816129a3565b9050919050565b60006020820190508181036000830152612cf2816129c6565b9050919050565b60006020820190508181036000830152612d12816129e9565b9050919050565b60006020820190508181036000830152612d3281612a0c565b9050919050565b60006020820190508181036000830152612d5281612a2f565b9050919050565b60006020820190508181036000830152612d7281612a52565b9050919050565b60006020820190508181036000830152612d9281612a75565b9050919050565b60006020820190508181036000830152612db281612a98565b9050919050565b6000602082019050612dce6000830184612abb565b92915050565b600060a082019050612de96000830188612abb565b612df66020830187612abb565b612e036040830186612abb565b612e1060608301856127ef565b612e1d60808301846127ef565b9695505050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612e6482613151565b9150612e6f83613151565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ea457612ea361319b565b5b828201905092915050565b6000612eba82613151565b9150612ec583613151565b925082612ed557612ed46131ca565b5b828204905092915050565b6000808291508390505b6001851115612f2a57808604811115612f0657612f0561319b565b5b6001851615612f155780820291505b8081029050612f238561320a565b9450612eea565b94509492505050565b6000612f3e82613151565b9150612f4983613151565b9250612f767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612f7e565b905092915050565b600082612f8e576001905061304a565b81612f9c576000905061304a565b8160018114612fb25760028114612fbc57612feb565b600191505061304a565b60ff841115612fce57612fcd61319b565b5b8360020a915084821115612fe557612fe461319b565b5b5061304a565b5060208310610133831016604e8410600b84101617156130205782820a90508381111561301b5761301a61319b565b5b61304a565b61302d8484846001612ee0565b925090508184048111156130445761304361319b565b5b81810290505b9392505050565b600061305c82613151565b915061306783613151565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130a05761309f61319b565b5b828202905092915050565b60006130b682613151565b91506130c183613151565b9250828210156130d4576130d361319b565b5b828203905092915050565b60006130ea8261315b565b91506130f58361315b565b9250828210156131085761310761319b565b5b828203905092915050565b600061311e82613131565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561318657808201518184015260208101905061316b565b83811115613195576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f736c697070616765000000000000000000000000000000000000000000000000600082015250565b7f4e6f7420656e6f75676820534841524520696e70757400000000000000000000600082015250565b7f496e76616c696420636f6c6c61746572616c2070726963650000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420726573657276652061646472657373000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f52656465656d696e672069732070617573656400000000000000000000000000600082015250565b7f3c636f6c6c61746572616c42616c616e63650000000000000000000000000000600082015250565b7f3e736c6970706167650000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f3c726564656d7074696f6e5f64656c6179000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c696420736861726520707269636500000000000000000000000000600082015250565b7f4d696e74696e6720697320706175736564000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61357181613113565b811461357c57600080fd5b50565b61358881613125565b811461359357600080fd5b50565b61359f81613151565b81146135aa57600080fd5b50565b6135b68161315b565b81146135c157600080fd5b5056fea26469706673582212200f6358f2003b40e2f1ff22bffcc0bf0c5aaa84092d12db800bc8f8f098a12f8264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 212,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 51,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 54,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4147,
        "contract": "contracts/Pool.sol:Pool",
        "label": "oracle",
        "offset": 2,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4149,
        "contract": "contracts/Pool.sol:Pool",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4151,
        "contract": "contracts/Pool.sol:Pool",
        "label": "dollar",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4153,
        "contract": "contracts/Pool.sol:Pool",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4155,
        "contract": "contracts/Pool.sol:Pool",
        "label": "share",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4159,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redeem_share_balances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4163,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redeem_collateral_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4166,
        "contract": "contracts/Pool.sol:Pool",
        "label": "unclaimed_pool_collateral",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4168,
        "contract": "contracts/Pool.sol:Pool",
        "label": "unclaimed_pool_share",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4172,
        "contract": "contracts/Pool.sol:Pool",
        "label": "last_redeemed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4183,
        "contract": "contracts/Pool.sol:Pool",
        "label": "missing_decimals",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4186,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redemption_delay",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4189,
        "contract": "contracts/Pool.sol:Pool",
        "label": "mint_paused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4192,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redeem_paused",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}