{
  "language": "Solidity",
  "sources": {
    "contracts/_mock/collateral/MockCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ncontract MockCollateral {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    address private _owner;\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => mapping(address => uint256)) private _allowance;\n\n    modifier _onlyOwner_() {\n        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n        _;\n    }\n\n    event Approval(address indexed src, address indexed dst, uint256 amt);\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\n\n    // Math\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a + b) >= a, \"\");\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a - b) <= a, \"\");\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function _move(\n        address src,\n        address dst,\n        uint256 amt\n    ) internal {\n        require(_balance[src] >= amt, \"!bal\");\n        _balance[src] = sub(_balance[src], amt);\n        _balance[dst] = add(_balance[dst], amt);\n        emit Transfer(src, dst, amt);\n    }\n\n    function _push(address to, uint256 amt) internal {\n        _move(address(this), to, amt);\n    }\n\n    function _pull(address from, uint256 amt) internal {\n        _move(from, address(this), amt);\n    }\n\n    function _mint(address dst, uint256 amt) internal {\n        _balance[dst] = add(_balance[dst], amt);\n        _totalSupply = add(_totalSupply, amt);\n        emit Transfer(address(0), dst, amt);\n    }\n\n    function allowance(address src, address dst) external view returns (uint256) {\n        return _allowance[src][dst];\n    }\n\n    function balanceOf(address whom) external view returns (uint256) {\n        return _balance[whom];\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function approve(address dst, uint256 amt) external returns (bool) {\n        _allowance[msg.sender][dst] = amt;\n        emit Approval(msg.sender, dst, amt);\n        return true;\n    }\n\n    function mint(address dst, uint256 amt) public returns (bool) {\n        _mint(dst, amt);\n        return true;\n    }\n\n    function burn(uint256 amt) public returns (bool) {\n        require(_balance[address(this)] >= amt, \"!bal\");\n        _balance[address(this)] = sub(_balance[address(this)], amt);\n        _totalSupply = sub(_totalSupply, amt);\n        emit Transfer(address(this), address(0), amt);\n        return true;\n    }\n\n    function transfer(address dst, uint256 amt) external returns (bool) {\n        _move(msg.sender, dst, amt);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amt\n    ) external returns (bool) {\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"!spender\");\n        _move(src, dst, amt);\n        if (msg.sender != src && _allowance[src][msg.sender] != 0) {\n            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/_mock/oracle/MockChainlinkAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ncontract MockChainlinkAggregator {\n    int256 public mock_price;\n    uint8 public mock_decimals;\n\n    constructor(int256 _mock_price, uint8 _decimals) {\n        mock_price = _mock_price;\n        mock_decimals = _decimals;\n    }\n\n    function decimals() external view returns (uint8) {\n        return mock_decimals;\n    }\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80,\n            int256 answer,\n            uint256,\n            uint256,\n            uint80\n        )\n    {\n        answer = mock_price;\n    }\n\n    function setLatestPrice(int256 _mock_price) public {\n        mock_price = _mock_price;\n    }\n\n    function setDecimals(uint8 _decimals) public {\n        mock_decimals = _decimals;\n    }\n}\n"
    },
    "contracts/_mock/oracle/MockPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IPairOracle.sol\";\n\ncontract MockPairOracle is IPairOracle, Ownable {\n    uint256 public mockPrice;\n    uint256 internal constant PRICE_PRECISION = 1e6;\n    uint256 public PERIOD = 3600; // 1 hour TWAP (time-weighted average price)\n\n    constructor(uint256 _mockPrice) {\n        mockPrice = _mockPrice;\n    }\n\n    function consult(address, uint256 amountIn) external view override returns (uint256 amountOut) {\n        return (mockPrice * amountIn) / PRICE_PRECISION;\n    }\n\n    function update() external override {}\n\n    function setPeriod(uint256 _period) external onlyOwner {\n        PERIOD = _period;\n    }\n\n    function mock(uint256 _mockPrice) external {\n        mockPrice = _mockPrice;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/IPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IPairOracle {\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n\n    function update() external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/oracle/ShareOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/IOracle.sol\";\nimport \"../interfaces/IPairOracle.sol\";\n\ncontract ShareOracle is Ownable, IOracle {\n    address public oracleShare;\n    address public chainlinkToUsd;\n    address public share;\n\n    uint256 private constant PRICE_PRECISION = 1e6;\n\n    constructor(\n        address _share,\n        address _oracleShare,\n        address _chainlinkToUsd\n    ) {\n        share = _share;\n        chainlinkToUsd = _chainlinkToUsd;\n        oracleShare = _oracleShare;\n    }\n\n    function consult() external view override returns (uint256) {\n        uint256 _priceTokenToUsd = priceTokenToUsd();\n        uint256 _priceShareToToken = IPairOracle(oracleShare).consult(share, PRICE_PRECISION);\n        return (_priceTokenToUsd * _priceShareToToken) / PRICE_PRECISION;\n    }\n\n    function priceTokenToUsd() internal view returns (uint256) {\n        AggregatorV3Interface _priceFeed = AggregatorV3Interface(chainlinkToUsd);\n        (, int256 _price, , , ) = _priceFeed.latestRoundData();\n        uint8 _decimals = _priceFeed.decimals();\n        return (uint256(_price) * PRICE_PRECISION) / (10**_decimals);\n    }\n\n    function setChainlinkToUsd(address _chainlinkToUsd) external onlyOwner {\n        chainlinkToUsd = _chainlinkToUsd;\n    }\n\n    function setOracleShare(address _oracleShare) external onlyOwner {\n        oracleShare = _oracleShare;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IOracle {\n    function consult() external view returns (uint256);\n}\n"
    },
    "contracts/ZapPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/IShare.sol\";\nimport \"./interfaces/IDollar.sol\";\nimport \"./ERC20/ERC20Custom.sol\";\n\ncontract ZapPool is Ownable, ReentrancyGuard, Initializable {\n    using SafeERC20 for ERC20;\n    using Address for address;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IOracle public oracle;\n    IDollar public dollar;\n    ERC20 public collateral;\n    IShare public share;\n    ITreasury public treasury;\n    uint256 private missing_decimals;\n\n    IUniswapV2Router public router;\n    address[] public router_path;\n\n    // Constants for various precisions\n    uint256 private constant PRICE_PRECISION = 1e6;\n    uint256 private constant RATIO_PRECISION = 1e6;\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\n    uint256 private constant SLIPPAGE_MAX = 100000; // 10%\n    uint256 private constant LIMIT_SWAP_TIME = 10 minutes;\n    uint256 public slippage = 50000;\n    // AccessControl state variables\n    bool public mint_paused = false;\n\n    modifier notContract() {\n        require(!msg.sender.isContract(), \"Allow non-contract only\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        ITreasury _treasury,\n        IDollar _dollar,\n        IShare _share,\n        ERC20 _collateral,\n        IOracle _oracleCollateral\n    ) external initializer onlyOwner {\n        treasury = _treasury;\n        dollar = _dollar;\n        share = _share;\n        collateral = _collateral;\n        oracle = _oracleCollateral;\n        missing_decimals = 18 - _collateral.decimals();\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function collateralReserve() public view returns (address) {\n        return treasury.collateralReserve();\n    }\n\n    function getCollateralPrice() public view returns (uint256) {\n        return oracle.consult();\n    }\n\n    function unclaimed_pool_collateral() public pure returns (uint256) {\n        return 0; // to avoid treasury call exception\n    }\n\n    function zapMint(uint256 _collateral_amount, uint256 _dollar_out_min) external notContract nonReentrant {\n        require(mint_paused == false, \"Minting is paused\");\n        (, uint256 _share_price, , uint256 _tcr, , , uint256 _minting_fee, ) = ITreasury(treasury).info();\n        require(_share_price > 0, \"Invalid share price\");\n        uint256 _price_collateral = getCollateralPrice();\n\n        uint256 _collateral_value = (_collateral_amount * (10**missing_decimals) * _price_collateral) / PRICE_PRECISION;\n        uint256 _actual_dollar_amount = _collateral_value - ((_collateral_value * _minting_fee) / PRICE_PRECISION);\n        require(_actual_dollar_amount >= _dollar_out_min, \"slippage\");\n\n        collateral.safeTransferFrom(msg.sender, address(this), _collateral_amount);\n        if (_tcr < COLLATERAL_RATIO_MAX) {\n            uint256 _share_value = (_collateral_value * (RATIO_PRECISION - _tcr)) / RATIO_PRECISION;\n            uint256 _min_share_amount = (_share_value * PRICE_PRECISION * (RATIO_PRECISION - slippage)) / _share_price / RATIO_PRECISION;\n            uint256 _swap_collateral_amount = (_collateral_amount * (RATIO_PRECISION - _tcr)) / RATIO_PRECISION;\n            collateral.safeApprove(address(router), 0);\n            collateral.safeApprove(address(router), _swap_collateral_amount);\n            uint256[] memory _received_amounts = router.swapExactTokensForTokens(_swap_collateral_amount, _min_share_amount, router_path, address(this), block.timestamp + LIMIT_SWAP_TIME);\n            emit ZapSwapped(_swap_collateral_amount, _received_amounts[_received_amounts.length - 1]);\n        }\n\n        uint256 _balanceShare = ERC20(address(share)).balanceOf(address(this));\n        uint256 _balanceCollateral = collateral.balanceOf(address(this));\n        if (_balanceShare > 0) {\n            ERC20Custom(address(share)).burn(_balanceShare);\n        }\n        if (_balanceCollateral > 0) {\n            _transferCollateralToReserve(_balanceCollateral); // transfer all collateral to reserve no matter what;\n        }\n        dollar.poolMint(msg.sender, _actual_dollar_amount);\n    }\n\n    function _transferCollateralToReserve(uint256 _amount) internal {\n        address _reserve = collateralReserve();\n        require(_reserve != address(0), \"Invalid reserve address\");\n        collateral.safeTransfer(_reserve, _amount);\n        emit TransferedCollateral(_amount);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function toggleMinting() external onlyOwner {\n        mint_paused = !mint_paused;\n    }\n\n    function setSlippage(uint256 _slippage) external onlyOwner {\n        require(_slippage <= SLIPPAGE_MAX, \"SLIPPAGE TOO HIGH\");\n        slippage = _slippage;\n    }\n\n    function setOracle(IOracle _oracle) external onlyOwner {\n        require(address(_oracle) != address(0), \"Invalid address\");\n        oracle = _oracle;\n    }\n\n    function setRouter(address _router, address[] calldata _path) external onlyOwner {\n        require(_router != address(0), \"Invalid router\");\n        router = IUniswapV2Router(_router);\n        router_path = _path;\n    }\n\n    event TransferedCollateral(uint256 indexed collateralAmount);\n    event ZapSwapped(uint256 indexed collateralAmount, uint256 indexed shareAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface ITreasury {\n    function hasPool(address _address) external view returns (bool);\n\n    function collateralReserve() external view returns (address);\n\n    function globalCollateralBalance() external view returns (uint256);\n\n    function globalCollateralValue() external view returns (uint256);\n\n    function requestTransfer(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external;\n\n    function info()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/IShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IShare {\n    function poolBurnFrom(address _address, uint256 _amount) external;\n\n    function poolMint(address _address, uint256 m_amount) external;\n}\n"
    },
    "contracts/interfaces/IDollar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IDollar {\n    function poolBurnFrom(address _address, uint256 _amount) external;\n\n    function poolMint(address _address, uint256 m_amount) external;\n}\n"
    },
    "contracts/ERC20/ERC20Custom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n// Due to compiling issues, _name, _symbol, and _decimals were removed\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Custom is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for `accounts`'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance =\n            allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\")\n        );\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/TreasuryFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./ERC20/ERC20Custom.sol\";\nimport \"./interfaces/IShareTreasuryFund.sol\";\n\ncontract TreasuryFund is Ownable, Initializable {\n    using SafeERC20 for IERC20;\n    address public share;\n\n    uint256 private constant BURN_EXESS_RATIO = 900000;\n    uint256 private constant PRECISION = 1000000;\n\n    function initialize(address _share) external onlyOwner initializer {\n        require(_share != address(0), \"Invalid address\");\n        share = _share;\n    }\n\n    function claim() external onlyOwner {\n        IShareTreasuryFund shareFund = IShareTreasuryFund(share);\n        uint256 unclaimed_amount = shareFund.unclaimedTreasuryFund();\n        shareFund.claimTreasuryFundRewards();\n        uint256 burnAmount = (unclaimed_amount * BURN_EXESS_RATIO) / PRECISION;\n        ERC20Custom(share).burn(burnAmount);\n    }\n\n    function transfer(address _recipient, uint256 amount) external onlyOwner {\n        IERC20(share).transfer(_recipient, amount);\n    }\n\n    function transferDevFundOwnership(address _newFund) external onlyOwner {\n        IShareTreasuryFund(share).setTreasuryFund(_newFund);\n    }\n\n    function balance() public view returns (uint256) {\n        return IERC20(share).balanceOf(address(this));\n    }\n\n    function setShareAddress(address _share) public onlyOwner {\n        share = _share;\n    }\n\n    function rescueFund(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IShareTreasuryFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IShareTreasuryFund {\n    function claimTreasuryFundRewards() external;\n\n    function unclaimedTreasuryFund() external view returns (uint256 _pending);\n\n    function setTreasuryFund(address _treasuryFund) external;\n}\n"
    },
    "contracts/vaults/aave/TreasuryVaultAave.sol": {
      "content": "// SPDX-License-Identifier: MITT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../interfaces/ITreasuryVault.sol\";\nimport \"./IAaveLendingPool.sol\";\nimport \"./IAaveIncentivesController.sol\";\n\ncontract TreasuryVaultAave is ITreasuryVault, Ownable, Initializable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    IERC20 public asset;\n    IERC20 public aToken;\n    address public treasury;\n    ILendingPool public AaveLendingPool; // Aave lending Pool\n    IAaveIncentivesController public AaveIncentivesController;\n    uint256 public override vaultBalance;\n\n    // EVENTS\n    event TreasuryChanged(address indexed newTreasury);\n    event Deposited(uint256 amount);\n    event Withdrawn(uint256 amount);\n    event Profited(uint256 amount);\n    event IncentivesClaimed(uint256 amount);\n\n    // MODIFIERS\n\n    modifier onlyTreasury {\n        require(_msgSender() == treasury, \"!treasury\");\n        _;\n    }\n\n    // Constructor\n\n    function initialize(\n        address _asset,\n        address _treasury,\n        address _aaveLendingPool,\n        address _aaveIncentivesController\n    ) external initializer onlyOwner {\n        asset = IERC20(_asset);\n        treasury = _treasury;\n        AaveLendingPool = ILendingPool(_aaveLendingPool);\n        AaveIncentivesController = IAaveIncentivesController(_aaveIncentivesController);\n        aToken = IERC20(_getATokenAddress(_asset));\n    }\n\n    // TREASURY functions\n\n    function deposit(uint256 _amount) external override onlyTreasury {\n        require(_amount > 0, \"amount = 0\");\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 newBalance = asset.balanceOf(address(this)); // invest everything in vault\n        vaultBalance = newBalance;\n        asset.safeApprove(address(AaveLendingPool), 0);\n        asset.safeApprove(address(AaveLendingPool), newBalance);\n        AaveLendingPool.deposit(address(asset), newBalance, address(this), 0);\n        emit Deposited(_amount);\n    }\n\n    function withdraw() external override onlyTreasury {\n        AaveLendingPool.withdraw(address(asset), balanceOfAToken(), address(this));\n        uint256 newBalance = asset.balanceOf(address(this));\n        uint256 profit = 0;\n        if (newBalance > vaultBalance) {\n            profit = newBalance - vaultBalance;\n        }\n        asset.safeTransfer(treasury, newBalance);\n        vaultBalance = asset.balanceOf(address(this));\n        emit Withdrawn(newBalance);\n        emit Profited(profit);\n    }\n\n    function claimIncetiveRewards() external onlyOwner {\n        uint256 unclaimedRewards = getUnclaimedIncentiveRewardsBalance();\n        address[] memory _tokens = new address[](1);\n        _tokens[0] = address(aToken);\n        AaveIncentivesController.claimRewards(_tokens, unclaimedRewards, msg.sender); // claim directly to owner\n        emit IncentivesClaimed(unclaimedRewards);\n    }\n\n    function getUnclaimedIncentiveRewardsBalance() public view returns (uint256) {\n        return AaveIncentivesController.getUserUnclaimedRewards(address(this));\n    }\n\n    function balanceOfAToken() public view returns (uint256) {\n        return aToken.balanceOf(address(this));\n    }\n\n    function _getATokenAddress(address _asset) internal view returns (address) {\n        DataTypes.ReserveData memory reserveData = AaveLendingPool.getReserveData(_asset);\n        return reserveData.aTokenAddress;\n    }\n\n    // ===== VAULT ADMIN FUNCTIONS ===============\n\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    function setIncentiveController(address _aaveIncentivesController) external onlyOwner {\n        require(_aaveIncentivesController != address(0), \"Invalid address\");\n        AaveIncentivesController = IAaveIncentivesController(_aaveIncentivesController);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) public onlyOwner returns (bytes memory) {\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, string(\"DevFund::executeTransaction: Transaction execution reverted.\"));\n        return returnData;\n    }\n\n    receive() external payable {}\n}\n\n"
    },
    "contracts/interfaces/ITreasuryVault.sol": {
      "content": "// SPDX-License-Identifier: MITT\n\npragma solidity ^0.8.4;\n\ninterface ITreasuryVault {\n    function vaultBalance() external view returns (uint256);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw() external;\n\n    //function claimIncetiveRewards() external;\n}\n\n"
    },
    "contracts/vaults/aave/IAaveLendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.4;\n\nimport \"./AaveDataTypes.sol\";\npragma experimental ABIEncoderV2;\n\ninterface ILendingPool {\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}\n"
    },
    "contracts/vaults/aave/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.4;\n\ninterface IAaveIncentivesController {\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     **/\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    /**\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address);\n}\n"
    },
    "contracts/vaults/aave/AaveDataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.4;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/ICollateralRatioPolicy.sol\";\nimport \"./interfaces/ITreasuryPolicy.sol\";\nimport \"./interfaces/ICollateralReserve.sol\";\n\ncontract Treasury is ITreasury, Ownable, Initializable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // addresses\n    address public override collateralReserve;\n    address public oracleDollar;\n    address public oracleShare;\n    address public oracleCollateral;\n    address public dollar;\n    address public share;\n    address public collateral;\n    address public collateralRatioPolicy;\n    address public treasuryPolicy;\n    address public profitSharingFund;\n    address public profitController;\n\n    // pools\n    address[] public pools_array;\n    mapping(address => bool) public pools;\n\n    // Constants for various precisions\n    uint256 private constant PRICE_PRECISION = 1e6;\n    uint256 private constant RATIO_PRECISION = 1e6;\n\n    // Number of decimals needed to get to 18\n    uint256 public missing_decimals;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPools {\n        require(pools[msg.sender], \"Only pools can use this function\");\n        _;\n    }\n\n    modifier onlyProfitController {\n        require(\n            msg.sender == profitController || msg.sender == owner(),\n            \"Only profit controller or owner can trigger\"\n        );\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        address _dollar,\n        address _share,\n        address _collateral,\n        address _treasuryPolicy,\n        address _collateralRatioPolicy,\n        address _collateralReserve,\n        address _profitSharingFund,\n        address _profitController\n    ) external initializer onlyOwner {\n        require(_dollar != address(0), \"invalidAddress\");\n        require(_share != address(0), \"invalidAddress\");\n        dollar = _dollar;\n        share = _share;\n        setCollateralAddress(_collateral);\n        setTreasuryPolicy(_treasuryPolicy);\n        setCollateralRatioPolicy(_collateralRatioPolicy);\n        setCollateralReserve(_collateralReserve);\n        setProfitSharingFund(_profitSharingFund);\n        setProfitController(_profitController);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function dollarPrice() public view returns (uint256) {\n        return IOracle(oracleDollar).consult();\n    }\n\n    function sharePrice() public view returns (uint256) {\n        return IOracle(oracleShare).consult();\n    }\n\n    function collateralPrice() public view returns (uint256) {\n        return IOracle(oracleCollateral).consult();\n    }\n\n    function hasPool(address _address) external view override returns (bool) {\n        return pools[_address] == true;\n    }\n\n    function target_collateral_ratio() public view returns (uint256) {\n        return ICollateralRatioPolicy(collateralRatioPolicy).target_collateral_ratio();\n    }\n\n    function effective_collateral_ratio() public view returns (uint256) {\n        return ICollateralRatioPolicy(collateralRatioPolicy).effective_collateral_ratio();\n    }\n\n    function minting_fee() public view returns (uint256) {\n        return ITreasuryPolicy(treasuryPolicy).minting_fee();\n    }\n\n    function redemption_fee() public view returns (uint256) {\n        return ITreasuryPolicy(treasuryPolicy).redemption_fee();\n    }\n\n    function info()\n        external\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            dollarPrice(),\n            sharePrice(),\n            IERC20(dollar).totalSupply(),\n            target_collateral_ratio(),\n            effective_collateral_ratio(),\n            globalCollateralValue(),\n            minting_fee(),\n            redemption_fee()\n        );\n    }\n\n    function globalCollateralBalance() public view override returns (uint256) {\n        uint256 _collateralReserveBalance = IERC20(collateral).balanceOf(collateralReserve);\n        return _collateralReserveBalance - totalUnclaimedBalance();\n    }\n\n    function globalCollateralValue() public view override returns (uint256) {\n        return\n            (globalCollateralBalance() * collateralPrice() * (10**missing_decimals)) /\n            PRICE_PRECISION;\n    }\n\n    // Iterate through all pools and calculate all unclaimed collaterals in all pools globally\n    function totalUnclaimedBalance() public view returns (uint256) {\n        uint256 _totalUnclaimed = 0;\n        for (uint256 i = 0; i < pools_array.length; i++) {\n            // Exclude null addresses\n            if (pools_array[i] != address(0)) {\n                _totalUnclaimed =\n                    _totalUnclaimed +\n                    (IPool(pools_array[i]).unclaimed_pool_collateral());\n            }\n        }\n        return _totalUnclaimed;\n    }\n\n    function excessCollateralBalance() public view returns (uint256 _excess) {\n        uint256 _tcr = target_collateral_ratio();\n        uint256 _ecr = effective_collateral_ratio();\n        if (_ecr <= _tcr) {\n            _excess = 0;\n        } else {\n            _excess = ((_ecr - _tcr) * globalCollateralBalance()) / RATIO_PRECISION;\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function requestTransfer(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) external override onlyPools {\n        ICollateralReserve(collateralReserve).transferTo(_token, _receiver, _amount);\n    }\n\n    function extractProfit(uint256 _amount) external onlyProfitController {\n        require(_amount > 0, \"zero amount\");\n        require(profitSharingFund != address(0), \"Invalid profitSharingFund\");\n        uint256 _maxExcess = excessCollateralBalance();\n        uint256 _maxAllowableAmount =\n            _maxExcess -\n                ((_maxExcess * ITreasuryPolicy(treasuryPolicy).excess_collateral_safety_margin()) /\n                    RATIO_PRECISION);\n        require(_amount <= _maxAllowableAmount, \"Excess allowable amount\");\n        ICollateralReserve(collateralReserve).transferTo(collateral, profitSharingFund, _amount);\n        emit ProfitExtracted(_amount);\n    }\n\n    // Add new Pool\n    function addPool(address pool_address) public onlyOwner {\n        require(pools[pool_address] == false, \"poolExisted\");\n        pools[pool_address] = true;\n        pools_array.push(pool_address);\n        emit PoolAdded(pool_address);\n    }\n\n    // Remove a pool\n    function removePool(address pool_address) public onlyOwner {\n        require(pools[pool_address] == true, \"!pool\");\n        // Delete from the mapping\n        delete pools[pool_address];\n        // 'Delete' from the array by setting the address to 0x0\n        for (uint256 i = 0; i < pools_array.length; i++) {\n            if (pools_array[i] == pool_address) {\n                pools_array[i] = address(0); // This will leave a null in the array and keep the indices the same\n                break;\n            }\n        }\n        emit PoolRemoved(pool_address);\n    }\n\n    function setTreasuryPolicy(address _treasuryPolicy) public onlyOwner {\n        require(_treasuryPolicy != address(0), \"invalidAddress\");\n        treasuryPolicy = _treasuryPolicy;\n    }\n\n    function setCollateralRatioPolicy(address _collateralRatioPolicy) public onlyOwner {\n        require(_collateralRatioPolicy != address(0), \"invalidAddress\");\n        collateralRatioPolicy = _collateralRatioPolicy;\n    }\n\n    function setOracleDollar(address _oracleDollar) external onlyOwner {\n        require(_oracleDollar != address(0), \"invalidAddress\");\n        oracleDollar = _oracleDollar;\n    }\n\n    function setOracleShare(address _oracleShare) external onlyOwner {\n        require(_oracleShare != address(0), \"invalidAddress\");\n        oracleShare = _oracleShare;\n    }\n\n    function setOracleCollateral(address _oracleCollateral) external onlyOwner {\n        require(_oracleCollateral != address(0), \"invalidAddress\");\n        oracleCollateral = _oracleCollateral;\n    }\n\n    function setCollateralAddress(address _collateral) public onlyOwner {\n        require(_collateral != address(0), \"invalidAddress\");\n        collateral = _collateral;\n        missing_decimals = 18 - ERC20(_collateral).decimals();\n    }\n\n    function setCollateralReserve(address _collateralReserve) public onlyOwner {\n        require(_collateralReserve != address(0), \"invalidAddress\");\n        collateralReserve = _collateralReserve;\n    }\n\n    function setProfitSharingFund(address _profitSharingFund) public onlyOwner {\n        require(_profitSharingFund != address(0), \"invalidAddress\");\n        profitSharingFund = _profitSharingFund;\n    }\n\n    function setProfitController(address _profitController) public onlyOwner {\n        require(_profitController != address(0), \"invalidAddress\");\n        profitController = _profitController;\n    }\n\n    /* ========== EVENTS ========== */\n    event PoolAdded(address indexed pool);\n    event PoolRemoved(address indexed pool);\n    event ProfitExtracted(uint256 amount);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IPool {\n    function getCollateralPrice() external view returns (uint256);\n\n    function unclaimed_pool_collateral() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICollateralRatioPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface ICollateralRatioPolicy {\n    function target_collateral_ratio() external view returns (uint256);\n\n    function effective_collateral_ratio() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITreasuryPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface ITreasuryPolicy {\n    function minting_fee() external view returns (uint256);\n\n    function redemption_fee() external view returns (uint256);\n\n    function excess_collateral_safety_margin() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICollateralReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface ICollateralReserve {\n    function transferTo(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/CollateralReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ICollateralReserve.sol\";\n\ncontract CollateralReserve is Ownable, ICollateralReserve, Initializable {\n    using SafeERC20 for IERC20;\n\n    // CONTRACTS\n    address public treasury;\n\n    /* ========== MODIFIER ========== */\n\n    modifier onlyTreasury() {\n        require(treasury == msg.sender, \"Only treasury can trigger this function\");\n        _;\n    }\n\n    function initialize(address _treasury) external onlyOwner initializer {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n    }\n\n    /* ========== VIEWS ================ */\n\n    function fundBalance(address _token) public view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function transferTo(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) public override onlyTreasury {\n        require(_receiver != address(0), \"Invalid address\");\n        require(_amount > 0, \"Cannot transfer zero amount\");\n        IERC20(_token).safeTransfer(_receiver, _amount);\n    }\n\n    function setTreasury(address _treasury) public onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(treasury);\n    }\n\n    event TreasuryChanged(address indexed newTreasury);\n}\n"
    },
    "contracts/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IConsolidatedFund.sol\";\n\n// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once STEEL is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract MasterChef is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of STEELs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. STEELs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that STEELs distribution occurs.\n        uint256 accRewardPerShare; // Accumulated STEELs per share, times 1e12. See below.\n    }\n    // The reward TOKEN!\n    IERC20 public rewardToken;\n    // reward tokens created per block.\n    uint256 public rewardPerBlock;\n    uint256 public BONUS_MULTIPLIER = 1;\n    address public fund;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when reward mining starts.\n    uint256 public startBlock;\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        IERC20 _rewardToken,\n        address _fund,\n        uint256 _rewardPerBlock,\n        uint256 _startBlock\n    ) {\n        rewardToken = _rewardToken;\n        rewardPerBlock = _rewardPerBlock;\n        startBlock = _startBlock;\n        fund = _fund;\n    }\n\n    function fundBalance() external view returns (uint256) {\n        return IConsolidatedFund(fund).balance(address(rewardToken));\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accRewardPerShare: 0}));\n    }\n\n    // Update the given pool's reward allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function setfund(address _fund) external onlyOwner {\n        require(_fund != address(0), \"Invalid zero address\");\n        fund = _fund;\n    }\n\n    // View function to see pending reward tokens on frontend.\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 addedReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accRewardPerShare = accRewardPerShare.add(addedReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for reward token allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\n            safeRewardTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\n        safeRewardTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe rewward token transfer function, just in case if rounding error causes pool to not have enough reward tokens.\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\n        IConsolidatedFund(fund).transferTo(address(rewardToken), _to, _amount);\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        massUpdatePools();\n        rewardPerBlock = _rewardPerBlock;\n    }\n}\n"
    },
    "contracts/interfaces/IConsolidatedFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IConsolidatedFund {\n    function balance(address _token) external view returns (uint256);\n\n    function transferTo(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/TreasuryPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/ITreasuryPolicy.sol\";\n\ncontract TreasuryPolicy is Ownable, Initializable, ITreasuryPolicy {\n    address public treasury;\n\n    // Constants for various precisions\n    uint256 private constant PRICE_PRECISION = 1e6;\n    uint256 private constant RATIO_PRECISION = 1e6;\n\n    // fees\n    uint256 public override redemption_fee; // 6 decimals of precision\n    uint256 public constant REDEMPTION_FEE_MAX = 9000; // 0.9%\n\n    uint256 public override minting_fee; // 6 decimals of precision\n    uint256 public constant MINTING_FEE_MAX = 5000; // 0.5%\n\n    uint256 public override excess_collateral_safety_margin;\n    uint256 public constant EXCESS_COLLATERAL_SAFETY_MARGIN_MIN = 150000; // 15%\n\n    /* ========== EVENTS ============= */\n\n    event TreasuryChanged(address indexed newTreasury);\n\n    function initialize(\n        address _treasury,\n        uint256 _redemption_fee,\n        uint256 _minting_fee,\n        uint256 _excess_collateral_safety_margin\n    ) external initializer onlyOwner {\n        treasury = _treasury;\n        setMintingFee(_minting_fee);\n        setRedemptionFee(_redemption_fee);\n        setExcessCollateralSafetyMargin(_excess_collateral_safety_margin);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(treasury);\n    }\n\n    function setRedemptionFee(uint256 _redemption_fee) public onlyOwner {\n        require(_redemption_fee <= REDEMPTION_FEE_MAX, \">REDEMPTION_FEE_MAX\");\n        redemption_fee = _redemption_fee;\n    }\n\n    function setMintingFee(uint256 _minting_fee) public onlyOwner {\n        require(_minting_fee <= MINTING_FEE_MAX, \">MINTING_FEE_MAX\");\n        minting_fee = _minting_fee;\n    }\n\n    function setExcessCollateralSafetyMargin(uint256 _excess_collateral_safety_margin) public onlyOwner {\n        require(\n            _excess_collateral_safety_margin >= EXCESS_COLLATERAL_SAFETY_MARGIN_MIN,\n            \"<EXCESS_COLLATERAL_SAFETY_MARGIN_MIN\"\n        );\n        excess_collateral_safety_margin = _excess_collateral_safety_margin;\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./interfaces/IShare.sol\";\nimport \"./interfaces/IDollar.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/IPool.sol\";\n\ncontract Pool is Ownable, ReentrancyGuard, Initializable, IPool {\n    using SafeERC20 for ERC20;\n\n    /* ========== ADDRESSES ================ */\n    address public oracle;\n    address public collateral;\n    address public dollar;\n    address public treasury;\n    address public share;\n\n    /* ========== STATE VARIABLES ========== */\n\n    mapping(address => uint256) public redeem_share_balances;\n    mapping(address => uint256) public redeem_collateral_balances;\n\n    uint256 public override unclaimed_pool_collateral;\n    uint256 public unclaimed_pool_share;\n\n    mapping(address => uint256) public last_redeemed;\n\n    // Constants for various precisions\n    uint256 private constant PRICE_PRECISION = 1e6;\n    uint256 private constant COLLATERAL_RATIO_PRECISION = 1e6;\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\n\n    // Number of decimals needed to get to 18\n    uint256 private missing_decimals;\n\n    // Number of blocks to wait before being able to collectRedemption()\n    uint256 public redemption_delay = 1;\n\n    // AccessControl state variables\n    bool public mint_paused = false;\n    bool public redeem_paused = false;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyTreasury() {\n        require(msg.sender == treasury, \"!treasury\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        address _dollar,\n        address _share,\n        address _collateral,\n        address _treasury\n    ) external initializer onlyOwner {\n        dollar = _dollar;\n        share = _share;\n        collateral = _collateral;\n        treasury = _treasury;\n        missing_decimals = 18 - ERC20(_collateral).decimals();\n    }\n\n    /* ========== VIEWS ========== */\n\n    function info()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            bool\n        )\n    {\n        return (\n            unclaimed_pool_collateral, // unclaimed amount of COLLATERAL\n            unclaimed_pool_share, // unclaimed amount of SHARE\n            getCollateralPrice(), // collateral price\n            mint_paused,\n            redeem_paused\n        );\n    }\n\n    function collateralReserve() public view returns (address) {\n        return ITreasury(treasury).collateralReserve();\n    }\n\n    function getCollateralPrice() public view override returns (uint256) {\n        return IOracle(oracle).consult();\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function mint(\n        uint256 _collateral_amount,\n        uint256 _share_amount,\n        uint256 _dollar_out_min\n    ) external {\n        require(mint_paused == false, \"Minting is paused\");\n        (, uint256 _share_price, , uint256 _tcr, , , uint256 _minting_fee, ) = ITreasury(treasury).info();\n        require(_share_price > 0, \"Invalid share price\");\n        uint256 _price_collateral = getCollateralPrice();\n        uint256 _total_dollar_value = 0;\n        uint256 _required_share_amount = 0;\n        if (_tcr > 0) {\n            uint256 _collateral_value = ((_collateral_amount * (10**missing_decimals)) * _price_collateral) / PRICE_PRECISION;\n            _total_dollar_value = (_collateral_value * COLLATERAL_RATIO_PRECISION) / _tcr;\n            if (_tcr < COLLATERAL_RATIO_MAX) {\n                _required_share_amount = ((_total_dollar_value - _collateral_value) * PRICE_PRECISION) / _share_price;\n            }\n        } else {\n            _total_dollar_value = (_share_amount * _share_price) / PRICE_PRECISION;\n            _required_share_amount = _share_amount;\n        }\n        uint256 _actual_dollar_amount = _total_dollar_value - ((_total_dollar_value * _minting_fee) / PRICE_PRECISION);\n        require(_dollar_out_min <= _actual_dollar_amount, \"slippage\");\n\n        if (_required_share_amount > 0) {\n            require(_required_share_amount <= _share_amount, \"Not enough SHARE input\");\n            IShare(share).poolBurnFrom(msg.sender, _required_share_amount);\n        }\n        if (_collateral_amount > 0) {\n            _transferCollateralToReserve(msg.sender, _collateral_amount);\n        }\n        IDollar(dollar).poolMint(msg.sender, _actual_dollar_amount);\n    }\n\n    function redeem(\n        uint256 _dollar_amount,\n        uint256 _share_out_min,\n        uint256 _collateral_out_min\n    ) external {\n        require(redeem_paused == false, \"Redeeming is paused\");\n        (, uint256 _share_price, , , uint256 _ecr, , , uint256 _redemption_fee) = ITreasury(treasury).info();\n        uint256 _collateral_price = getCollateralPrice();\n        require(_collateral_price > 0, \"Invalid collateral price\");\n        require(_share_price > 0, \"Invalid share price\");\n        uint256 _dollar_amount_post_fee = _dollar_amount - ((_dollar_amount * _redemption_fee) / PRICE_PRECISION);\n        uint256 _collateral_output_amount = 0;\n        uint256 _share_output_amount = 0;\n\n        if (_ecr < COLLATERAL_RATIO_MAX) {\n            uint256 _share_output_value = _dollar_amount_post_fee - ((_dollar_amount_post_fee * _ecr) / PRICE_PRECISION);\n            _share_output_amount = (_share_output_value * PRICE_PRECISION) / _share_price;\n        }\n\n        if (_ecr > 0) {\n            uint256 _collateral_output_value = ((_dollar_amount_post_fee * _ecr) / PRICE_PRECISION) / (10**missing_decimals);\n            _collateral_output_amount = (_collateral_output_value * PRICE_PRECISION) / _collateral_price;\n        }\n\n        // Check if collateral balance meets and meet output expectation\n        uint256 _totalCollateralBalance = ITreasury(treasury).globalCollateralBalance();\n        require(_collateral_output_amount <= _totalCollateralBalance, \"<collateralBalance\");\n        require(_collateral_out_min <= _collateral_output_amount && _share_out_min <= _share_output_amount, \">slippage\");\n\n        if (_collateral_output_amount > 0) {\n            redeem_collateral_balances[msg.sender] = redeem_collateral_balances[msg.sender] + _collateral_output_amount;\n            unclaimed_pool_collateral = unclaimed_pool_collateral + _collateral_output_amount;\n        }\n\n        if (_share_output_amount > 0) {\n            redeem_share_balances[msg.sender] = redeem_share_balances[msg.sender] + _share_output_amount;\n            unclaimed_pool_share = unclaimed_pool_share + _share_output_amount;\n        }\n\n        last_redeemed[msg.sender] = block.number;\n\n        // Move all external functions to the end\n        IDollar(dollar).poolBurnFrom(msg.sender, _dollar_amount);\n        if (_share_output_amount > 0) {\n            _mintShareToCollateralReserve(_share_output_amount);\n        }\n    }\n\n    function collectRedemption() external {\n        require((last_redeemed[msg.sender] + redemption_delay) <= block.number, \"<redemption_delay\");\n\n        bool _send_share = false;\n        bool _send_collateral = false;\n        uint256 _share_amount;\n        uint256 _collateral_amount;\n\n        // Use Checks-Effects-Interactions pattern\n        if (redeem_share_balances[msg.sender] > 0) {\n            _share_amount = redeem_share_balances[msg.sender];\n            redeem_share_balances[msg.sender] = 0;\n            unclaimed_pool_share = unclaimed_pool_share - _share_amount;\n            _send_share = true;\n        }\n\n        if (redeem_collateral_balances[msg.sender] > 0) {\n            _collateral_amount = redeem_collateral_balances[msg.sender];\n            redeem_collateral_balances[msg.sender] = 0;\n            unclaimed_pool_collateral = unclaimed_pool_collateral - _collateral_amount;\n            _send_collateral = true;\n        }\n\n        if (_send_share) {\n            _requestTransferShare(msg.sender, _share_amount);\n        }\n\n        if (_send_collateral) {\n            _requestTransferCollateral(msg.sender, _collateral_amount);\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _transferCollateralToReserve(address _sender, uint256 _amount) internal {\n        address _reserve = collateralReserve();\n        require(_reserve != address(0), \"Invalid reserve address\");\n        ERC20(collateral).safeTransferFrom(_sender, _reserve, _amount);\n    }\n\n    function _mintShareToCollateralReserve(uint256 _amount) internal {\n        address _reserve = collateralReserve();\n        require(_reserve != address(0), \"Invalid reserve address\");\n        IShare(share).poolMint(_reserve, _amount);\n    }\n\n    function _requestTransferCollateral(address _receiver, uint256 _amount) internal {\n        ITreasury(treasury).requestTransfer(collateral, _receiver, _amount);\n    }\n\n    function _requestTransferShare(address _receiver, uint256 _amount) internal {\n        ITreasury(treasury).requestTransfer(share, _receiver, _amount);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function toggleMinting() external onlyOwner {\n        mint_paused = !mint_paused;\n    }\n\n    function toggleRedeeming() external onlyOwner {\n        redeem_paused = !redeem_paused;\n    }\n\n    function setOracle(address _oracle) external onlyOwner {\n        require(_oracle != address(0), \"Invalid address\");\n        oracle = _oracle;\n    }\n\n    function setRedemptionDelay(uint256 _redemption_delay) external onlyOwner {\n        redemption_delay = _redemption_delay;\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    // EVENTS\n    event TreasuryChanged(address indexed newTreasury);\n}\n"
    },
    "contracts/Share.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ERC20/ERC20Custom.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\ncontract Share is ERC20Custom, Ownable, Initializable {\n    /* ========== STATE VARIABLES ========== */\n\n    // ERC20 - Token\n    string public symbol;\n    string public name;\n    uint8 public constant decimals = 18;\n    uint256 public constant genesis_supply = 50000 ether; // 50000 will be mited at genesis for liq pool seeding\n\n    // CONTRACTS\n    address public treasury;\n\n    // DISTRIBUTION\n    uint256 public constant COMMUNITY_REWARD_ALLOCATION = 700_000_000 ether; // 700M\n    uint256 public constant TREASURY_FUND_ALLOCATION = 300_000_000 ether; // 300M\n    uint256 public constant TREASURY_FUND_VESTING_DURATION = 1095 days; // 36 months\n    uint256 public startTime; // Start time of vesting duration\n    uint256 public endTime; // End of vesting duration\n    address public treasuryFund;\n    uint256 public treasuryFundLastClaimed;\n    uint256 public treasuryFundEmissionRate =\n        TREASURY_FUND_ALLOCATION / TREASURY_FUND_VESTING_DURATION;\n    address public communityRewardController; // Holding SHARE tokens to distribute into Liquiditiy Mining Pools\n    uint256 public communityRewardClaimed;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPools() {\n        require(ITreasury(treasury).hasPool(msg.sender), \"!pools\");\n        _;\n    }\n\n    modifier onlyTreasuryFund {\n        require(msg.sender == treasuryFund, \"Only treasury fund address can trigger\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _treasury,\n        address _treasuryFund,\n        address _communityRewardController,\n        uint256 _startTime\n    ) external initializer onlyOwner {\n        name = _name;\n        symbol = _symbol;\n        treasury = _treasury;\n        treasuryFund = _treasuryFund;\n        communityRewardController = _communityRewardController;\n        startTime = _startTime;\n        endTime = _startTime + TREASURY_FUND_VESTING_DURATION;\n        treasuryFundLastClaimed = _startTime;\n        _mint(msg.sender, genesis_supply);\n    }\n\n    function claimCommunityRewards(uint256 amount) external onlyOwner {\n        require(amount > 0, \"invalidAmount\");\n        require(communityRewardController != address(0), \"!rewardController\");\n        uint256 _remainingRewards = COMMUNITY_REWARD_ALLOCATION - communityRewardClaimed;\n        require(amount <= _remainingRewards, \"exceedRewards\");\n        communityRewardClaimed = communityRewardClaimed + amount;\n        _mint(communityRewardController, amount);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setTreasuryAddress(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    function setTreasuryFund(address _treasuryFund) external onlyTreasuryFund {\n        require(_treasuryFund != address(0), \"zero\");\n        treasuryFund = _treasuryFund;\n    }\n\n    function setCommunityRewardController(address _communityRewardController) external onlyOwner {\n        require(_communityRewardController != address(0), \"zero\");\n        communityRewardController = _communityRewardController;\n    }\n\n    // This function is what other Pools will call to mint new SHARE\n    function poolMint(address m_address, uint256 m_amount) external onlyPools {\n        super._mint(m_address, m_amount);\n        emit ShareMinted(address(this), m_address, m_amount);\n    }\n\n    // This function is what other pools will call to burn SHARE\n    function poolBurnFrom(address b_address, uint256 b_amount) external onlyPools {\n        super._burnFrom(b_address, b_amount);\n        emit ShareBurned(b_address, address(this), b_amount);\n    }\n\n    function unclaimedTreasuryFund() public view returns (uint256 _pending) {\n        uint256 _now = block.timestamp;\n        if (_now > endTime) _now = endTime;\n        if (treasuryFundLastClaimed >= _now) return 0;\n        _pending = (_now - treasuryFundLastClaimed) * treasuryFundEmissionRate;\n    }\n\n    function claimTreasuryFundRewards() external onlyTreasuryFund {\n        uint256 _pending = unclaimedTreasuryFund();\n        if (_pending > 0 && treasuryFund != address(0)) {\n            _mint(treasuryFund, _pending);\n            treasuryFundLastClaimed = block.timestamp;\n        }\n    }\n\n    /* ========== EVENTS ========== */\n\n    event TreasuryChanged(address indexed newTreasury);\n    event ShareBurned(address indexed from, address indexed to, uint256 amount);\n    event ShareMinted(address indexed from, address indexed to, uint256 amount);\n}\n"
    },
    "contracts/Dollar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ERC20/ERC20Custom.sol\";\nimport \"./Share.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IDollar.sol\";\n\ncontract Dollar is ERC20Custom, IDollar, Ownable, Initializable {\n    // ERC20\n    string public symbol;\n    string public name;\n    uint8 public constant decimals = 18;\n    uint256 public constant genesis_supply = 5000 ether; // 5000 will be mited at genesis for liq pool seeding\n\n    // CONTRACTS\n    address public treasury;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPools() {\n        require(ITreasury(treasury).hasPool(msg.sender), \"!pools\");\n        _;\n    }\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _treasury\n    ) external initializer onlyOwner {\n        name = _name;\n        symbol = _symbol;\n        treasury = _treasury;\n        _mint(msg.sender, genesis_supply);\n    }\n\n    function poolBurnFrom(address _address, uint256 _amount) external override onlyPools {\n        super._burnFrom(_address, _amount);\n        emit DollarBurned(_address, msg.sender, _amount);\n    }\n\n    function poolMint(address _address, uint256 _amount) external override onlyPools {\n        super._mint(_address, _amount);\n        emit DollarMinted(msg.sender, _address, _amount);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setTreasuryAddress(address _treasury) public onlyOwner {\n        require(_treasury != address(0), \"Invalid address\");\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event TreasuryChanged(address indexed newTreasury);\n    event DollarBurned(address indexed from, address indexed to, uint256 amount);\n    event DollarMinted(address indexed from, address indexed to, uint256 amount);\n}\n"
    },
    "contracts/CollateralRatioPolicy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./ERC20/ERC20Custom.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/ICollateralRatioPolicy.sol\";\n\ncontract CollateralRatioPolicy is Ownable, ICollateralRatioPolicy, Initializable {\n    using SafeMath for uint256;\n\n    address public oracleDollar;\n    address public dollar;\n    address public treasury;\n\n    // Constants for various precisions\n    uint256 private constant PRICE_PRECISION = 1e6;\n    uint256 private constant RATIO_PRECISION = 1e6;\n\n    // collateral_ratio\n    uint256 public override target_collateral_ratio; // 6 decimals of precision\n    uint256 public override effective_collateral_ratio; // 6 decimals of precision\n    uint256 public last_refresh_cr_timestamp;\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\n    uint256 public ratio_step; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\n    uint256 public price_target; // The price of DOLLAR; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at $1\n    uint256 public price_band; // The bound above and below the price target at which the Collateral ratio is allowed to drop\n    bool public collateral_ratio_paused = false; // during bootstraping phase, collateral_ratio will be fixed at 100%\n    bool public using_effective_collateral_ratio = true; // toggle the effective collateral ratio usage\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\n\n    /* ========== EVENTS ============= */\n\n    event TreasuryChanged(address indexed newTreasury);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() {\n        ratio_step = 2500; // = 0.25% at 6 decimals of precision\n        target_collateral_ratio = 1000000;\n        effective_collateral_ratio = 1000000;\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\n        price_target = 1000000; // = $1. (6 decimals of precision). Collateral ratio will adjust according to the $1 price target at genesis\n        price_band = 5000;\n    }\n\n    function initialize(address _treasury, address _dollar) external onlyOwner initializer {\n        setTreasury(_treasury);\n        setDollar(_dollar);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function calcEffectiveCollateralRatio() public view returns (uint256) {\n        if (!using_effective_collateral_ratio) {\n            return target_collateral_ratio;\n        }\n        uint256 total_collateral_value = ITreasury(treasury).globalCollateralValue();\n        uint256 total_supply_dollar = IERC20(dollar).totalSupply();\n        uint256 ecr = total_collateral_value.mul(PRICE_PRECISION).div(total_supply_dollar);\n        if (ecr > COLLATERAL_RATIO_MAX) {\n            return COLLATERAL_RATIO_MAX;\n        }\n        return ecr;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function refreshCollateralRatio() public {\n        require(collateral_ratio_paused == false, \"Collateral Ratio has been paused\");\n        require(\n            block.timestamp - last_refresh_cr_timestamp >= refresh_cooldown,\n            \"Must wait for the refresh cooldown since last refresh\"\n        );\n\n        uint256 current_dollar_price = IOracle(oracleDollar).consult();\n\n        // Step increments are 0.25% (upon genesis, changable by setRatioStep())\n        if (current_dollar_price > price_target.add(price_band)) {\n            // decrease collateral ratio\n            if (target_collateral_ratio <= ratio_step) {\n                // if within a step of 0, go to 0\n                target_collateral_ratio = 0;\n            } else {\n                target_collateral_ratio = target_collateral_ratio.sub(ratio_step);\n            }\n        }\n        // IRON price is below $1 - `price_band`. Need to increase `collateral_ratio`\n        else if (current_dollar_price < price_target.sub(price_band)) {\n            // increase collateral ratio\n            if (target_collateral_ratio.add(ratio_step) >= COLLATERAL_RATIO_MAX) {\n                target_collateral_ratio = COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\n            } else {\n                target_collateral_ratio = target_collateral_ratio.add(ratio_step);\n            }\n        }\n\n        // If using ECR, then calcECR. If not, update ECR = TCR\n        if (using_effective_collateral_ratio) {\n            effective_collateral_ratio = calcEffectiveCollateralRatio();\n        } else {\n            effective_collateral_ratio = target_collateral_ratio;\n        }\n\n        last_refresh_cr_timestamp = block.timestamp;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setRatioStep(uint256 _ratio_step) public onlyOwner {\n        ratio_step = _ratio_step;\n    }\n\n    function setPriceTarget(uint256 _price_target) public onlyOwner {\n        price_target = _price_target;\n    }\n\n    function setRefreshCooldown(uint256 _refresh_cooldown) public onlyOwner {\n        refresh_cooldown = _refresh_cooldown;\n    }\n\n    function setPriceBand(uint256 _price_band) external onlyOwner {\n        price_band = _price_band;\n    }\n\n    function setTreasury(address _treasury) public onlyOwner {\n        require(_treasury != address(0), \"invalidAddress\");\n        treasury = _treasury;\n        emit TreasuryChanged(treasury);\n    }\n\n    function setDollar(address _dollar) public onlyOwner {\n        require(_dollar != address(0), \"invalidAddress\");\n        dollar = _dollar;\n    }\n\n    // use to retstore CRs incase of using new Treasury\n    function reset(uint256 _target_collateral_ratio, uint256 _effective_collateral_ratio) external onlyOwner {\n        require(\n            _target_collateral_ratio <= COLLATERAL_RATIO_MAX && _effective_collateral_ratio <= COLLATERAL_RATIO_MAX,\n            \"invalidRatio\"\n        );\n        target_collateral_ratio = _target_collateral_ratio;\n        effective_collateral_ratio = _effective_collateral_ratio;\n    }\n\n    function toggleCollateralRatio() public onlyOwner {\n        collateral_ratio_paused = !collateral_ratio_paused;\n    }\n\n    function toggleEffectiveCollateralRatio() public onlyOwner {\n        using_effective_collateral_ratio = !using_effective_collateral_ratio;\n    }\n\n    function setOracleDollar(address _oracleDollar) public onlyOwner {\n        require(_oracleDollar != address(0), \"invalidAddress\");\n        oracleDollar = _oracleDollar;\n    }\n}\n"
    },
    "contracts/libs/SpotPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/IUniswapLP.sol\";\n\ncontract SpotPriceGetter {\n    using SafeMath for uint256;\n\n    uint256 private constant PRICE_PRECISION = 1e6;\n\n    function consult(address _token, address _refLpPair) public view returns (uint256) {\n        IUniswapLP _lpPair = IUniswapLP(_refLpPair);\n        address _token0 = _lpPair.token0();\n        address _token1 = _lpPair.token1();\n        require(_token0 == _token || _token1 == _token, \"Invalid pair\");\n        (uint256 _reserve0, uint256 _reserve1, ) = _lpPair.getReserves();\n        require(_reserve0 > 0 && _reserve1 > 0, \"No reserves\");\n        uint8 _token0MissingDecimals = 18 - (ERC20(_token0).decimals());\n        uint8 _token1MissingDecimals = 18 - (ERC20(_token1).decimals());\n        uint256 _price = 0;\n        if (_token == _token0) {\n            _price = _reserve1.mul(10**_token1MissingDecimals).mul(PRICE_PRECISION).div(_reserve0);\n        } else {\n            _price = _reserve0.mul(10**_token0MissingDecimals).mul(PRICE_PRECISION).div(_reserve1);\n        }\n        return _price;\n    }\n\n    function consultToUsdChainlink(\n        address _token,\n        address _refLpPair,\n        address _chainlinkPriceFeed\n    ) external view returns (uint256) {\n        uint256 _price = consult(_token, _refLpPair);\n        AggregatorV3Interface _priceFeed = AggregatorV3Interface(_chainlinkPriceFeed);\n        (, int256 _priceToUsd, , , ) = _priceFeed.latestRoundData();\n        uint8 _decimals = _priceFeed.decimals();\n        return _price.mul(uint256(_priceToUsd)).div(uint256(10)**_decimals);\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IUniswapLP {\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\n}\n"
    },
    "contracts/oracle/PcsPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../libs/FixedPoint.sol\";\nimport \"../libs/UQ112x112.sol\";\nimport \"../interfaces/IPairOracle.sol\";\nimport \"../interfaces/IUniswapLP.sol\";\n\ncontract PcsPairOracle is Ownable, IPairOracle {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n\n    uint256 public PERIOD = 3600; // 60-minute TWAP (time-weighted average price)\n\n    IUniswapLP public immutable pair;\n    address public immutable token0;\n    address public immutable token1;\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint32 public blockTimestampLast;\n    FixedPoint.uq112x112 public price0Average;\n    FixedPoint.uq112x112 public price1Average;\n\n    constructor(address pairAddress) {\n        IUniswapLP _pair = IUniswapLP(pairAddress);\n        pair = _pair;\n        token0 = _pair.token0();\n        token1 = _pair.token1();\n        price0CumulativeLast = _pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\n        price1CumulativeLast = _pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"PairOracle: NO_RESERVES\"); // Ensure that there's liquidity in the pair\n    }\n\n    function setPeriod(uint256 _period) external onlyOwner {\n        PERIOD = _period;\n    }\n\n    function update() external override {\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) =\n            currentCumulativePrices(address(pair));\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\n\n        // Ensure that at least one full period has passed since the last update\n        require(timeElapsed >= PERIOD, \"PairOracle: PERIOD_NOT_ELAPSED\");\n\n        // Overflow is desired, casting never truncates\n        // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n        price0CumulativeLast = price0Cumulative;\n        price1CumulativeLast = price1Cumulative;\n        blockTimestampLast = blockTimestamp;\n    }\n\n    // Note this will always return 0 before update has been called successfully for the first time.\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\n        if (token == token0) {\n            amountOut = price0Average.mul(amountIn).decode144();\n        } else {\n            require(token == token1, \"PairOracle: INVALID_TOKEN\");\n            amountOut = price1Average.mul(amountIn).decode144();\n        }\n    }\n\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(address _pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        IUniswapLP uniswapPair = IUniswapLP(_pair);\n        price0Cumulative = uniswapPair.price0CumulativeLast();\n        price1Cumulative = uniswapPair.price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 _blockTimestampLast) = uniswapPair.getReserves();\n        if (_blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "contracts/libs/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./Babylonian.sol\";\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n    uint256 private constant Q224 = Q112 << RESOLUTION;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z;\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // take the reciprocal of a UQ112x112\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n    }\n}\n"
    },
    "contracts/libs/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/libs/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n"
    },
    "contracts/ConsolidatedFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract ConsolidatedFund is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // CONTRACTS\n    mapping(address => address) public pools;\n\n    /* ========== MODIFIER ========== */\n\n    modifier onlyPools() {\n        require(pools[msg.sender] != address(0), \"Only pool can request transfer\");\n        _;\n    }\n\n    /* ========== VIEWS ================ */\n\n    function balance(address _token) public view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function transferTo(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) public onlyPools {\n        require(_receiver != address(0), \"Invalid address\");\n        require(pools[msg.sender] == _token, \"Invalid request token\");\n        if (_amount > 0) {\n            uint8 missing_decimals = 18 - ERC20(_token).decimals();\n            IERC20(_token).safeTransfer(_receiver, _amount.div(10**missing_decimals));\n        }\n    }\n\n    // Add new Pool\n    function addPool(address pool_address, address reward_token) public onlyOwner {\n        require(pools[pool_address] == address(0), \"poolExisted\");\n        require(reward_token != address(0), \"invalid reward token\");\n        pools[pool_address] = reward_token;\n        emit PoolAdded(pool_address);\n    }\n\n    // Remove a pool\n    function removePool(address pool_address) public onlyOwner {\n        require(pools[pool_address] != address(0), \"!pool\");\n        // Delete from the mapping\n        delete pools[pool_address];\n        emit PoolRemoved(pool_address);\n    }\n\n    function rescueFund(address _token) public onlyOwner {\n        IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\n    }\n\n    event PoolAdded(address pool);\n    event PoolRemoved(address pool);\n}\n"
    },
    "contracts/oracle/DollarOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/IOracle.sol\";\nimport \"../interfaces/IPairOracle.sol\";\n\ncontract DollarOracle is Ownable, IOracle {\n    address public oracleDollarCollateral;\n    address public oracleCollateralUsd;\n    address public dollar;\n\n    uint256 public missingDecimals;\n    uint256 private constant PRICE_PRECISION = 1e6;\n\n    constructor(\n        address _dollar,\n        address _oracleDollarCollateral,\n        address _oracleCollateralUsd,\n        uint256 _missingDecimals\n    ) {\n        dollar = _dollar;\n        oracleCollateralUsd = _oracleCollateralUsd;\n        oracleDollarCollateral = _oracleDollarCollateral;\n        missingDecimals = _missingDecimals;\n    }\n\n    function consult() external view override returns (uint256) {\n        uint256 _priceCollateralUsd = IOracle(oracleCollateralUsd).consult();\n        uint256 _priceDollarCollateral =\n            IPairOracle(oracleDollarCollateral).consult(\n                dollar,\n                PRICE_PRECISION * (10**missingDecimals)\n            );\n        return (_priceCollateralUsd * _priceDollarCollateral) / PRICE_PRECISION;\n    }\n\n    function setOracleCollateralUsd(address _oracleCollateralUsd) external onlyOwner {\n        oracleCollateralUsd = _oracleCollateralUsd;\n    }\n\n    function setOracleDollarCollateral(address _oracleDollarCollateral) external onlyOwner {\n        oracleDollarCollateral = _oracleDollarCollateral;\n    }\n}\n"
    },
    "contracts/oracle/DaiOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/IOracle.sol\";\nimport \"../interfaces/IPairOracle.sol\";\n\ncontract DaiOracle is Ownable, IOracle {\n    address public oracleDollarCollateral;\n    address public oracleCollateralUsd;\n    address public dollar;\n\n    uint256 public missingDecimals;\n    uint256 private constant PRICE_PRECISION = 1e6;\n\n    constructor(\n        address _dollar,\n        address _oracleDollarCollateral,\n        uint256 _missingDecimals\n    ) {\n        dollar = _dollar;\n        oracleDollarCollateral = _oracleDollarCollateral;\n        missingDecimals = _missingDecimals;\n    }\n\n    function consult() external view override returns (uint256) {\n        uint256 _priceCollateralUsd = IOracle(oracleCollateralUsd).consult();\n        uint256 _priceDollarCollateral =\n            IPairOracle(oracleDollarCollateral).consult(\n                dollar,\n                PRICE_PRECISION * (10**missingDecimals)\n            );\n        return (_priceCollateralUsd * _priceDollarCollateral) / PRICE_PRECISION;\n    }\n\n    function setOracleCollateralUsd(address _oracleCollateralUsd) external onlyOwner {\n        oracleCollateralUsd = _oracleCollateralUsd;\n    }\n\n    function setOracleDollarCollateral(address _oracleDollarCollateral) external onlyOwner {\n        oracleDollarCollateral = _oracleDollarCollateral;\n    }\n}\n"
    },
    "contracts/oracle/CollateralOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/IOracle.sol\";\n\ncontract CollateralOracle is Ownable, IOracle {\n    address public chainlinkCollateralUsd;\n\n    uint256 private constant PRICE_PRECISION = 1e6;\n\n    constructor(address _chainlinkCollateralUsd) {\n        chainlinkCollateralUsd = _chainlinkCollateralUsd;\n    }\n\n    function consult() external view override returns (uint256) {\n        AggregatorV3Interface _priceFeed = AggregatorV3Interface(chainlinkCollateralUsd);\n        (, int256 _price, , , ) = _priceFeed.latestRoundData();\n        uint8 _decimals = _priceFeed.decimals();\n        return (uint256(_price) * PRICE_PRECISION) / (10**_decimals);\n    }\n\n    function setChainlinkCollateralUsd(address _chainlinkCollateralUsd) external onlyOwner {\n        chainlinkCollateralUsd = _chainlinkCollateralUsd;\n    }\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IMasterChef {\n    function userInfo(uint256 pid, address account) external view returns (uint256 amount, uint256 debt);\n}\n"
    },
    "contracts/interfaces/IMasterChefFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IMasterChefFund {\n    function balance() external view returns (uint256);\n\n    function transferTo(address _receiver, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libs/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *Submitted for verification at BscScan.com on 2020-09-10\n */\n\npragma solidity 0.8.4;\n\n/// @title Multicall - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract Multicall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] memory calls)\n        public\n        returns (uint256 blockNumber, bytes[] memory returnData)\n    {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n            require(success);\n            returnData[i] = ret;\n        }\n    }\n\n    // Helper functions\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n        difficulty = block.difficulty;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ncontract Timelock {\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 12 hours;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint256 delay_) {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    function setDelay(uint256 delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(\n            eta >= getBlockTimestamp() + delay,\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n        );\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= (eta + GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // Execute the call\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}