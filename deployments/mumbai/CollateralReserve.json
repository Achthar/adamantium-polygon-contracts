{
  "address": "0x0162764e7F50192299B337fA652797bcea6c0978",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "fundBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe96bc9c88e52da7373706b947ee2f220613bada4f5382a357631817ec39bcf48",
  "receipt": {
    "to": null,
    "from": "0x333132d4FCbe1B7F34198AD545672BbA95c5882b",
    "contractAddress": "0x0162764e7F50192299B337fA652797bcea6c0978",
    "transactionIndex": 0,
    "gasUsed": "1248709",
    "logsBloom": "0x
    "blockHash": "0xbaadbcd2a7a104eaccca725b7ca0011de062187d6cdd0dd878b2e1dac42f4795",
    "transactionHash": "0xe96bc9c88e52da7373706b947ee2f220613bada4f5382a357631817ec39bcf48",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17382560,
        "transactionHash": "0xe96bc9c88e52da7373706b947ee2f220613bada4f5382a357631817ec39bcf48",
        "address": "0x0162764e7F50192299B337fA652797bcea6c0978",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000333132d4fcbe1b7f34198ad545672bba95c5882b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbaadbcd2a7a104eaccca725b7ca0011de062187d6cdd0dd878b2e1dac42f4795"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17382560,
        "transactionHash": "0xe96bc9c88e52da7373706b947ee2f220613bada4f5382a357631817ec39bcf48",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000333132d4fcbe1b7f34198ad545672bba95c5882b",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000237d8dc2fb9000000000000000000000000000000000000000000000000000156c9bfc40a730000000000000000000000000000000000000000000000000000092c98c0ff3dc0000000000000000000000000000000000000000000000000015491e6e7daba00000000000000000000000000000000000000000000000000000b64719d2ef6c00",
        "logIndex": 1,
        "blockHash": "0xbaadbcd2a7a104eaccca725b7ca0011de062187d6cdd0dd878b2e1dac42f4795"
      }
    ],
    "blockNumber": 17382560,
    "cumulativeGasUsed": "1248709",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "528e37ad3cee8dde3b849d6f9ffe4ef0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralReserve.sol\":\"CollateralReserve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/CollateralReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ICollateralReserve.sol\\\";\\n\\ncontract CollateralReserve is Ownable, ICollateralReserve, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    // CONTRACTS\\n    address public treasury;\\n\\n    /* ========== MODIFIER ========== */\\n\\n    modifier onlyTreasury() {\\n        require(treasury == msg.sender, \\\"Only treasury can trigger this function\\\");\\n        _;\\n    }\\n\\n    function initialize(address _treasury) external onlyOwner initializer {\\n        require(_treasury != address(0), \\\"Invalid address\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /* ========== VIEWS ================ */\\n\\n    function fundBalance(address _token) public view returns (uint256) {\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function transferTo(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) public override onlyTreasury {\\n        require(_receiver != address(0), \\\"Invalid address\\\");\\n        require(_amount > 0, \\\"Cannot transfer zero amount\\\");\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function setTreasury(address _treasury) public onlyOwner {\\n        require(_treasury != address(0), \\\"Invalid address\\\");\\n        treasury = _treasury;\\n        emit TreasuryChanged(treasury);\\n    }\\n\\n    event TreasuryChanged(address indexed newTreasury);\\n}\\n\",\"keccak256\":\"0x81b0cb35343265a9e77e338e1c71e028d361368c2a799860647ad325255e405e\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralReserve {\\n    function transferTo(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfecb90c3ff46ec118782ddee66662538cb403e47d2e47fda710cd0d87fdc0c12\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b611545806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5f2a1521161005b578063a5f2a15214610103578063c4d66de81461011f578063f0f442601461013b578063f2fde38b1461015757610088565b80630ad5a8651461008d57806361d027b3146100bd578063715018a6146100db5780638da5cb5b146100e5575b600080fd5b6100a760048036038101906100a29190610d98565b610173565b6040516100b491906111c2565b60405180910390f35b6100c5610205565b6040516100d2919061103c565b60405180910390f35b6100e361022b565b005b6100ed610365565b6040516100fa919061103c565b60405180910390f35b61011d60048036038101906101189190610dc1565b61038e565b005b61013960048036038101906101349190610d98565b610501565b005b61015560048036038101906101509190610d98565b61070b565b005b610171600480360381019061016c9190610d98565b6108a0565b005b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101ae919061103c565b60206040518083038186803b1580156101c657600080fd5b505afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610e39565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610233610a49565b73ffffffffffffffffffffffffffffffffffffffff16610251610365565b73ffffffffffffffffffffffffffffffffffffffff16146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590611162565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561048e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610485906110a2565b60405180910390fd5b600081116104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906110e2565b60405180910390fd5b6104fc82828573ffffffffffffffffffffffffffffffffffffffff16610a519092919063ffffffff16565b505050565b610509610a49565b73ffffffffffffffffffffffffffffffffffffffff16610527610365565b73ffffffffffffffffffffffffffffffffffffffff161461057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490611142565b60405180910390fd5b600060159054906101000a900460ff16806105a55750600060149054906101000a900460ff16155b6105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611122565b60405180910390fd5b60008060159054906101000a900460ff161590508015610635576001600060156101000a81548160ff0219169083151502179055506001600060146101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906110a2565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107075760008060156101000a81548160ff0219169083151502179055505b5050565b610713610a49565b73ffffffffffffffffffffffffffffffffffffffff16610731610365565b73ffffffffffffffffffffffffffffffffffffffff1614610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e90611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee906110a2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60860405160405180910390a250565b6108a8610a49565b73ffffffffffffffffffffffffffffffffffffffff166108c6610365565b73ffffffffffffffffffffffffffffffffffffffff161461091c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091390611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561098c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610983906110c2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b610ad28363a9059cbb60e01b8484604051602401610a70929190611057565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ad7565b505050565b6000610b39826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b9e9092919063ffffffff16565b9050600081511115610b995780806020019051810190610b599190610e10565b610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f906111a2565b60405180910390fd5b5b505050565b6060610bad8484600085610bb6565b90509392505050565b606082471015610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf290611102565b60405180910390fd5b610c0485610cca565b610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90611182565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c6c9190611025565b60006040518083038185875af1925050503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b5091509150610cbe828286610cdd565b92505050949350505050565b600080823b905060008111915050919050565b60608315610ced57829050610d3d565b600083511115610d005782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d349190611080565b60405180910390fd5b9392505050565b600081359050610d53816114ca565b92915050565b600081519050610d68816114e1565b92915050565b600081359050610d7d816114f8565b92915050565b600081519050610d92816114f8565b92915050565b600060208284031215610daa57600080fd5b6000610db884828501610d44565b91505092915050565b600080600060608486031215610dd657600080fd5b6000610de486828701610d44565b9350506020610df586828701610d44565b9250506040610e0686828701610d6e565b9150509250925092565b600060208284031215610e2257600080fd5b6000610e3084828501610d59565b91505092915050565b600060208284031215610e4b57600080fd5b6000610e5984828501610d83565b91505092915050565b610e6b8161120f565b82525050565b6000610e7c826111dd565b610e8681856111f3565b9350610e96818560208601611257565b80840191505092915050565b6000610ead826111e8565b610eb781856111fe565b9350610ec7818560208601611257565b610ed08161128a565b840191505092915050565b6000610ee8600f836111fe565b9150610ef38261129b565b602082019050919050565b6000610f0b6026836111fe565b9150610f16826112c4565b604082019050919050565b6000610f2e601b836111fe565b9150610f3982611313565b602082019050919050565b6000610f516026836111fe565b9150610f5c8261133c565b604082019050919050565b6000610f74602e836111fe565b9150610f7f8261138b565b604082019050919050565b6000610f976020836111fe565b9150610fa2826113da565b602082019050919050565b6000610fba6027836111fe565b9150610fc582611403565b604082019050919050565b6000610fdd601d836111fe565b9150610fe882611452565b602082019050919050565b6000611000602a836111fe565b915061100b8261147b565b604082019050919050565b61101f8161124d565b82525050565b60006110318284610e71565b915081905092915050565b60006020820190506110516000830184610e62565b92915050565b600060408201905061106c6000830185610e62565b6110796020830184611016565b9392505050565b6000602082019050818103600083015261109a8184610ea2565b905092915050565b600060208201905081810360008301526110bb81610edb565b9050919050565b600060208201905081810360008301526110db81610efe565b9050919050565b600060208201905081810360008301526110fb81610f21565b9050919050565b6000602082019050818103600083015261111b81610f44565b9050919050565b6000602082019050818103600083015261113b81610f67565b9050919050565b6000602082019050818103600083015261115b81610f8a565b9050919050565b6000602082019050818103600083015261117b81610fad565b9050919050565b6000602082019050818103600083015261119b81610fd0565b9050919050565b600060208201905081810360008301526111bb81610ff3565b9050919050565b60006020820190506111d76000830184611016565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061121a8261122d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561127557808201518184015260208101905061125a565b83811115611284576000848401525b50505050565b6000601f19601f8301169050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f74207472616e73666572207a65726f20616d6f756e740000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4f6e6c792074726561737572792063616e20747269676765722074686973206660008201527f756e6374696f6e00000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6114d38161120f565b81146114de57600080fd5b50565b6114ea81611221565b81146114f557600080fd5b50565b6115018161124d565b811461150c57600080fd5b5056fea2646970667358221220deceff916c524e3f1cd63c2d27f93b59906c0a4dc9a01bcbe264c9eb09b482ff64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5f2a1521161005b578063a5f2a15214610103578063c4d66de81461011f578063f0f442601461013b578063f2fde38b1461015757610088565b80630ad5a8651461008d57806361d027b3146100bd578063715018a6146100db5780638da5cb5b146100e5575b600080fd5b6100a760048036038101906100a29190610d98565b610173565b6040516100b491906111c2565b60405180910390f35b6100c5610205565b6040516100d2919061103c565b60405180910390f35b6100e361022b565b005b6100ed610365565b6040516100fa919061103c565b60405180910390f35b61011d60048036038101906101189190610dc1565b61038e565b005b61013960048036038101906101349190610d98565b610501565b005b61015560048036038101906101509190610d98565b61070b565b005b610171600480360381019061016c9190610d98565b6108a0565b005b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101ae919061103c565b60206040518083038186803b1580156101c657600080fd5b505afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610e39565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610233610a49565b73ffffffffffffffffffffffffffffffffffffffff16610251610365565b73ffffffffffffffffffffffffffffffffffffffff16146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590611162565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561048e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610485906110a2565b60405180910390fd5b600081116104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906110e2565b60405180910390fd5b6104fc82828573ffffffffffffffffffffffffffffffffffffffff16610a519092919063ffffffff16565b505050565b610509610a49565b73ffffffffffffffffffffffffffffffffffffffff16610527610365565b73ffffffffffffffffffffffffffffffffffffffff161461057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490611142565b60405180910390fd5b600060159054906101000a900460ff16806105a55750600060149054906101000a900460ff16155b6105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611122565b60405180910390fd5b60008060159054906101000a900460ff161590508015610635576001600060156101000a81548160ff0219169083151502179055506001600060146101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906110a2565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107075760008060156101000a81548160ff0219169083151502179055505b5050565b610713610a49565b73ffffffffffffffffffffffffffffffffffffffff16610731610365565b73ffffffffffffffffffffffffffffffffffffffff1614610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e90611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee906110a2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60860405160405180910390a250565b6108a8610a49565b73ffffffffffffffffffffffffffffffffffffffff166108c6610365565b73ffffffffffffffffffffffffffffffffffffffff161461091c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091390611142565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561098c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610983906110c2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b610ad28363a9059cbb60e01b8484604051602401610a70929190611057565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ad7565b505050565b6000610b39826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b9e9092919063ffffffff16565b9050600081511115610b995780806020019051810190610b599190610e10565b610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f906111a2565b60405180910390fd5b5b505050565b6060610bad8484600085610bb6565b90509392505050565b606082471015610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf290611102565b60405180910390fd5b610c0485610cca565b610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90611182565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c6c9190611025565b60006040518083038185875af1925050503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b5091509150610cbe828286610cdd565b92505050949350505050565b600080823b905060008111915050919050565b60608315610ced57829050610d3d565b600083511115610d005782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d349190611080565b60405180910390fd5b9392505050565b600081359050610d53816114ca565b92915050565b600081519050610d68816114e1565b92915050565b600081359050610d7d816114f8565b92915050565b600081519050610d92816114f8565b92915050565b600060208284031215610daa57600080fd5b6000610db884828501610d44565b91505092915050565b600080600060608486031215610dd657600080fd5b6000610de486828701610d44565b9350506020610df586828701610d44565b9250506040610e0686828701610d6e565b9150509250925092565b600060208284031215610e2257600080fd5b6000610e3084828501610d59565b91505092915050565b600060208284031215610e4b57600080fd5b6000610e5984828501610d83565b91505092915050565b610e6b8161120f565b82525050565b6000610e7c826111dd565b610e8681856111f3565b9350610e96818560208601611257565b80840191505092915050565b6000610ead826111e8565b610eb781856111fe565b9350610ec7818560208601611257565b610ed08161128a565b840191505092915050565b6000610ee8600f836111fe565b9150610ef38261129b565b602082019050919050565b6000610f0b6026836111fe565b9150610f16826112c4565b604082019050919050565b6000610f2e601b836111fe565b9150610f3982611313565b602082019050919050565b6000610f516026836111fe565b9150610f5c8261133c565b604082019050919050565b6000610f74602e836111fe565b9150610f7f8261138b565b604082019050919050565b6000610f976020836111fe565b9150610fa2826113da565b602082019050919050565b6000610fba6027836111fe565b9150610fc582611403565b604082019050919050565b6000610fdd601d836111fe565b9150610fe882611452565b602082019050919050565b6000611000602a836111fe565b915061100b8261147b565b604082019050919050565b61101f8161124d565b82525050565b60006110318284610e71565b915081905092915050565b60006020820190506110516000830184610e62565b92915050565b600060408201905061106c6000830185610e62565b6110796020830184611016565b9392505050565b6000602082019050818103600083015261109a8184610ea2565b905092915050565b600060208201905081810360008301526110bb81610edb565b9050919050565b600060208201905081810360008301526110db81610efe565b9050919050565b600060208201905081810360008301526110fb81610f21565b9050919050565b6000602082019050818103600083015261111b81610f44565b9050919050565b6000602082019050818103600083015261113b81610f67565b9050919050565b6000602082019050818103600083015261115b81610f8a565b9050919050565b6000602082019050818103600083015261117b81610fad565b9050919050565b6000602082019050818103600083015261119b81610fd0565b9050919050565b600060208201905081810360008301526111bb81610ff3565b9050919050565b60006020820190506111d76000830184611016565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061121a8261122d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561127557808201518184015260208101905061125a565b83811115611284576000848401525b50505050565b6000601f19601f8301169050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f74207472616e73666572207a65726f20616d6f756e740000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4f6e6c792074726561737572792063616e20747269676765722074686973206660008201527f756e6374696f6e00000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6114d38161120f565b81146114de57600080fd5b50565b6114ea81611221565b81146114f557600080fd5b50565b6115018161124d565b811461150c57600080fd5b5056fea2646970667358221220deceff916c524e3f1cd63c2d27f93b59906c0a4dc9a01bcbe264c9eb09b482ff64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/CollateralReserve.sol:CollateralReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 51,
        "contract": "contracts/CollateralReserve.sol:CollateralReserve",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 54,
        "contract": "contracts/CollateralReserve.sol:CollateralReserve",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2150,
        "contract": "contracts/CollateralReserve.sol:CollateralReserve",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}